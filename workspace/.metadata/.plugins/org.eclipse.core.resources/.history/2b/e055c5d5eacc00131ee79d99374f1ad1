/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxicdma.h"
#include "xfe_top.h"

XAxiCdma dmaInstance;
XFe_top hlsInstance;

int dma_init(XAxiCdma_Config* cfg_ptr)
{
        // ***** Local variables *****
        int status = 0;

        xil_printf("Initializing DMA...\n\r");

        // Look up hardware configuration for device
        cfg_ptr = XAxiCdma_LookupConfig(XPAR_AXICDMA_0_DEVICE_ID);
        if (!cfg_ptr)
        {
                printf("Error: No config found for %d\r\n", XPAR_AXICDMA_0_DEVICE_ID);
                return XST_FAILURE;
        }

        // Initialize driver
        status = XAxiCdma_CfgInitialize(&dmaInstance, cfg_ptr, XPAR_AXI_CDMA_0_BASEADDR);
        if (status != XST_SUCCESS)
        {
                xil_printf("Error: Initialization failed %d\r\n", status);
                return status;
        }

        status = XAxiCdma_SwitchMode(&dmaInstance, XAXICDMA_SG_MODE);
        if (status != XST_SUCCESS) {
        	printf("Error: Could not switch to SG mode\n\r");
        	return status;
        }
        // Test for Scatter Gather
        if (XAxiCdma_IsSimpleMode(&dmaInstance))
        {
                xil_printf("Error: Device configured as SG mode \r\n");
                return XST_FAILURE;
        }

        // Disable interrupts for both channels
        XAxiDma_IntrDisable(&dmaInstance, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
        XAxiDma_IntrDisable(&dmaInstance, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

        xil_printf("DMA initialization complete!\n\r");
        return XST_SUCCESS;
}

int main()
{
    init_platform();

    print("Hello World\n\r");

    return 0;
}
