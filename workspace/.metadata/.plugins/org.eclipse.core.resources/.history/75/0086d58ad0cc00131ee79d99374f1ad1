/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#define DEBUG
#undef NDEBUG
#include <stdio.h>
#include "platform.h"
#include "xstatus.h"
#include "xparameters.h"

#include "xaxicdma.h"

// #include "xsimple_top.h"
#include "xfe_top.h"

#define SIZE 16
#define BSIZE 4

// Some hard-coded base addresses
#define IN_BRAM_BASE	0xC0000000
#define OUT_BRAM_BASE 	0xC2000000
#define BRAM_SIZE 		0x0000FFFF
#define MATRIX_BASE 	0x20000000
#define BDRING_BASE 	0x3F000000

#define HOST_BLOCK_BASE 0x3E000000

#define DRAM_MAX 		0x3FFFFFFF

#define BDRING_ALIGNMENT 0x40   // 16 32-bit word alignment


// XSimple_top hlsInstance;
XFe_top hlsInstance;
XAxiCdma dmaInstance;

int hls_ip_init()
{
        int status = XST_SUCCESS;

        status = XFe_top_Initialize(&hlsInstance, XPAR_FE_TOP_0_DEVICE_ID);
        if (status != XST_SUCCESS) {
                xil_printf("Error initializing HLS device\n\r");
                return status;
        }
        XFe_top_InterruptClear(&hlsInstance, 0xFFFFFFFF);
        XFe_top_InterruptDisable(&hlsInstance, 0xFFFFFFFF);
        xil_printf("HLS initialization complete!\n\r");
        return status;
}

void printHlsStatus()
{
        xil_printf("*** HLS status signals ***\n\r");
        if (!hlsInstance.IsReady) {
                xil_printf("\tHLS instance is not ready\n\r");
                return;
        }

        xil_printf("\tHLS done: %08x\n\r", XFe_top_IsDone(&hlsInstance));
        xil_printf("\tHLS idle: %08x\n\r", XFe_top_IsIdle(&hlsInstance));
        xil_printf("\tHLS ready: %08x\n\r", XFe_top_IsReady(&hlsInstance));

        xil_printf("\tHLS interrupt enabled: %08x\n\r", XFe_top_InterruptGetEnabled(&hlsInstance));
        xil_printf("\tHLS interrupt status: %08x\n\r", XFe_top_InterruptGetStatus(&hlsInstance));
}

int dma_init(XAxiCdma_Config* cfg_ptr)
{
        // ***** Local variables *****
        int status = 0;

        xil_printf("Initializing DMA...\n\r");

        // Look up hardware configuration for device
        cfg_ptr = XAxiCdma_LookupConfig(XPAR_AXI_CDMA_0_DEVICE_ID);
        if (!cfg_ptr)
        {
                xil_printf("No config found for %d\r\n", XPAR_AXI_CDMA_0_DEVICE_ID);
                return XST_FAILURE;
        }

        // Initialize driver
        status = XAxiCdma_CfgInitialize(&dmaInstance, cfg_ptr, XPAR_AXI_CDMA_0_BASEADDR);
        if (status != XST_SUCCESS)
        {
                xil_printf("Initialization failed %d\r\n", status);
                return XST_FAILURE;
        }
        // Switch mode to SG
        status = XAxiCdma_SwitchMode(&dmaInstance, XAXICDMA_SG_MODE);
        if (status != XST_SUCCESS) {
        	xil_printf("Switching to SG mode failed\n\r");
        	return status;
        }
        // Test for Scatter Gather
        if (XAxiCdma_IsSimpleMode(&dmaInstance))
        {
                xil_printf("Device configured in simple mode, exiting\r\n");
                return XST_FAILURE;
        }

        // Disable interrupts for both channels
//        XAxiCdma_IntrDisable(&dmaInstance, XAXICDMA_XR_IRQ_ALL_MASK);

        xil_printf("DMA initialization complete!\n\r");
//        printDmaRegisters();
//        printMyRegs();
        return XST_SUCCESS;
}

void printArray(int *array)
{
	int i = 0;
	for (i=0; i<SIZE; i++) {
		xil_printf("%d ", array[i]);
	}
	xil_printf("\n\r");
}

void printMatrix(int a[][SIZE])
{
	int i, j;
	for (i=0; i<SIZE; i++) {
		for (j=0; j<SIZE; j++) {
			xil_printf("%d ", a[i][j]);
		}
		xil_printf("\n\r");
	}
}

void initMatrix(int a[][SIZE])
{
	int i, j;
	for (i=0; i<SIZE; i++) {
		for (j=0; j<SIZE; j++) {
			a[i][j] = 1; i*SIZE+j;
		}
	}
}

int bdRingInit()
{
	int status = XST_SUCCESS;
	u32 numRings = XAxiCdma_BdRingCntCalc(BDRING_ALIGNMENT, DRAM_MAX - BDRING_BASE + 1, BDRING_BASE);
	status = XAxiCdma_BdRingCreate(&dmaInstance, BDRING_BASE, BDRING_BASE, BDRING_ALIGNMENT, numRings);
	if (status != XST_SUCCESS) {
		xil_printf("Error creating BD RING\n\r");
		return status;
	}
	return status;
}

// Simple CDMA transfer - blocks till the DMA transfer is done
int doSimpleCDMA(int *dst, int *src, u32 size)
{
	int status = XST_SUCCESS;
    status = XAxiCdma_SimpleTransfer(&dmaInstance, (u32)src, (u32)dst, size, NULL, NULL);
    if (status != XST_SUCCESS) {
    	xil_printf("Something went wrong in setting up SimpleTransfer!\n\r");
    	cleanup_platform();
    	return status;
    }
    // Wait for DMA transfer to finish
    while (XAxiCdma_IsBusy(&dmaInstance));
    return status;
}

// Copies a BSIZE*BSIZE block from matrix m[starti][startj]..m[starti+BSIZE-1][startj+BSIZE-1]
// Does not handle boundary cases now
int copyBlockToBRAM(int m[][SIZE], int starti, int startj, int *bRAM)
{
	int status = XST_SUCCESS;
	XAxiCdma_Bd *bdRing = NULL;
	XAxiCdma_Bd *completedBds = NULL;
	int completedBdCount = 0;
	int i;

	// Allocate space for the BD ring - one BD for each row
	status = XAxiCdma_BdRingAlloc(&dmaInstance, BSIZE, &bdRing);
	if (status != XST_SUCCESS) {
		xil_printf("Could not allocate BD ring\n\r");
		return status;
	}

	// Create BD ring:
	for (i = 0; i < BSIZE; i++) {
		XAxiCdma_Bd *bd = &bdRing[i];

		// Clear status reg
		XAxiCdma_BdClearSts(bd);

		// Set destination buffer addr
		status = XAxiCdma_BdSetDstBufAddr(bd, bRAM+i*BSIZE);
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Set source buffer addr
		status = XAxiCdma_BdSetSrcBufAddr(bd, &m[(starti+i)][startj]);
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Set length in bytes to transfer
		status = XAxiCdma_BdSetLength(bd, BSIZE*sizeof(int));
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Print out the BD
//		XAxiCdma_DumpBd(bd);
	}

	// Write the start reg
	XAxiCdma_WriteReg(dmaInstance.BaseAddr, XAXICDMA_CDESC_OFFSET, (u32)bdRing);

	// Enqueue in CDMA, launch copies
	status = XAxiCdma_BdRingToHw(&dmaInstance, BSIZE, bdRing, NULL, NULL);
	if (status != XST_SUCCESS) {
		xil_printf("Error enqueueing BD rings to hw\n\r");
		return status;
	}

	// Wait for the DMA to finish
	while (XAxiCdma_IsBusy(&dmaInstance));
	return status;
}


// Copies a BSIZE*BSIZE block from BRAM to matrix m[starti][startj]..m[starti+BSIZE-1][startj+BSIZE-1]
// Does not handle boundary cases now
int copyBlockFromBRAM(int m[][SIZE], int starti, int startj, int bRAM[][BSIZE])
{
	int status = XST_SUCCESS;
	XAxiCdma_Bd *bdRing = NULL;
	int i;

	// Allocate space for the BD ring - one BD for each row
	status = XAxiCdma_BdRingAlloc(&dmaInstance, BSIZE, &bdRing);
	if (status != XST_SUCCESS) {
		xil_printf("Could not allocate BD ring\n\r");
		return status;
	}

	// Create BD ring:
	for (i = 0; i < BSIZE; i++) {
		XAxiCdma_Bd *bd = &bdRing[i];

		// Clear status reg
		XAxiCdma_BdClearSts(bd);

		// Set destination buffer addr
		status = XAxiCdma_BdSetDstBufAddr(bd, &m[starti+i][startj]);
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Set source buffer addr
		status = XAxiCdma_BdSetSrcBufAddr(bd, &bRAM[i][0]);
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Set length in bytes to transfer
		status = XAxiCdma_BdSetLength(bd, BSIZE*sizeof(int));
		if (status != XST_SUCCESS) {
			xil_printf("Could not set destination buf addr\n\r");
			return status;
		}

		// Print out the BD
//		XAxiCdma_DumpBd(bd);
	}

	XAxiCdma_WriteReg(dmaInstance.BaseAddr, XAXICDMA_CDESC_OFFSET, (u32)bdRing);

	// Enqueue in CDMA, launch copies
	status = XAxiCdma_BdRingToHw(&dmaInstance, BSIZE, bdRing, NULL, NULL);
	if (status != XST_SUCCESS) {
		xil_printf("Error enqueueing BD rings to hw\n\r");
		return status;
	}

	// Wait for the DMA to finish
	while (XAxiCdma_IsBusy(&dmaInstance));

	return status;
}

int init()
{
	int status = XST_SUCCESS;
	XAxiCdma_Config *dmaCfgPtr = NULL;
	Xil_DCacheDisable();
	init_platform();

	status = dma_init(dmaCfgPtr);
    if (status != XST_SUCCESS) {
    	xil_printf("Something went wrong in CDMA initialization!\n\r");
    	cleanup_platform();
    	return status;
    }

    status = bdRingInit();
    if (status != XST_SUCCESS) {
    	xil_printf("Error initializing BD ring\n\r");
    	cleanup_platform();
    	return status;
    }

    status = hls_ip_init();
    if (status != XST_SUCCESS) {
      	xil_printf("Error initializing HLS IP!\n\r");
      	cleanup_platform();
      	return status;
    }
    return status;
}

void initMatrices(int m1[][SIZE], int m2[][SIZE], int m3[][SIZE])
{
	int i=0, j=0;

	// Initialize m1 to increasing numbers
	// Initialize m2 to the identity matrix
	// Initialize m3 (the product matrix) to zero
	for (i=0; i<SIZE; i++) {
		for (j=0; j<SIZE; j++) {
			m1[i][j] = 1;
			if (i == j) {
				m2[i][j] = 1;
			}
			else {
				m2[i][j] = 0;
			}
			m3[i][j] = 0;
		}
	}
}

void matMult(int a[][SIZE], int b[][SIZE], int c[][SIZE], int blocka[][BSIZE], int blockb[][BSIZE], int blockc[][BSIZE])
{
	int status = XST_SUCCESS;
    int ia=0, ja=0, jb=0;
    for (ia=0; ia < SIZE; ia += BSIZE) {
        for (ja=0; ja < SIZE; ja += BSIZE) {

        	status = copyBlockToBRAM(a, ia, ja, blocka);
        	if (status != XST_SUCCESS) {
        		printf("Error copying blocka\n\r");
        		return status;
        	}
            for (jb = 0; jb < SIZE; jb+=BSIZE) {
            	status = copyBlockToBRAM(b, ja, jb, blockb);
            	if (status != XST_SUCCESS) {
            		printf("Error not copy b[%d][%d]\n\r", ja, jb);
            		return status;
            	}
            	status = copyBlockToBRAM(c, ia, jb, blockc);

//                blockMatMult(blocka, blockb, blockc);
                XFe_top_Start(&hlsInstance);
                while (!(XFe_top_IsDone(&hlsInstance) || XFe_top_IsIdle(&hlsInstance)));
                copyBlockFromBRAM(c, ia, jb, blockc);
#ifdef DEBUG
                printMatrix(c);
#endif

             }
        }
    }

}

int main()
{
	int status = XST_SUCCESS;
	int i = 0;
    int **m1 = (int**)MATRIX_BASE;
    int **m2 = (int**)(MATRIX_BASE+(SIZE*SIZE*sizeof(int)));
    int **m3 = (int**)(MATRIX_BASE+2*(SIZE*SIZE*sizeof(int)));

    int *b1 = (int*)IN_BRAM_BASE;
    int *b2 = (int*)(IN_BRAM_BASE+(BSIZE*BSIZE*sizeof(int)));
    int *b3 = (int*)OUT_BRAM_BASE;
    int *hostBlock = (int*)HOST_BLOCK_BASE;

	init();

	initMatrices(m1, m2, m3);

	matMult(m1, m2, m3, b1, b2, b3);

    status = copyBlockToBRAM(m1, 4, 0, bRAM);
    if (status != XST_SUCCESS) {
    	xil_printf("Copyblock failed\n\r");
    }

    xil_printf("Starting FE\n\r");
    XFe_top_Start(&hlsInstance);
    while (!(XFe_top_IsDone(&hlsInstance) || XFe_top_IsIdle(&hlsInstance)));

    xil_printf("HLS done\n\r");

    status = copyBlockFromBRAM(m1, 4, 0, bRAM);
    if (status != XST_SUCCESS) {
    	printf("Error copying data back from BRAM\n\r");
    	cleanup_platform();
    	return status;
    }

    printMatrix(m1);

    cleanup_platform();
    return 0;
}
