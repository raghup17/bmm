-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inPtr_req_din : OUT STD_LOGIC;
    inPtr_req_full_n : IN STD_LOGIC;
    inPtr_req_write : OUT STD_LOGIC;
    inPtr_rsp_empty_n : IN STD_LOGIC;
    inPtr_rsp_read : OUT STD_LOGIC;
    inPtr_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    inPtr_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    inPtr_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    inPtr_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of simple_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal inPtr_addr_read_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_2_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_85_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_42_temp: signed (32-1 downto 0);
    signal tmp_3_fu_101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_load_2_reg_148_temp: signed (32-1 downto 0);
    signal i_fu_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_69_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_fu_42 assign process. --
    i_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((inPtr_req_full_n = ap_const_logic_0)))) then 
                i_fu_42 <= i_1_fu_111_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_fu_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                i_load_2_reg_148 <= i_fu_42;
                tmp_2_reg_143 <= tmp_2_fu_96_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((inPtr_rsp_empty_n = ap_const_logic_0)))) then
                inPtr_addr_read_reg_138 <= inPtr_datain;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , inPtr_req_full_n , inPtr_rsp_empty_n , icmp_fu_79_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((icmp_fu_79_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((inPtr_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((inPtr_req_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, icmp_fu_79_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (icmp_fu_79_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, icmp_fu_79_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (icmp_fu_79_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_111_p2 <= std_logic_vector(unsigned(i_fu_42) + unsigned(ap_const_lv32_1));
    icmp_fu_79_p2 <= "1" when (signed(tmp_fu_69_p4) < signed(ap_const_lv27_1)) else "0";

    -- inPtr_address assign process. --
    inPtr_address_assign_proc : process(ap_CS_fsm, inPtr_req_full_n, tmp_1_fu_85_p1, tmp_3_fu_101_p1)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((inPtr_req_full_n = ap_const_logic_0)))) then 
            inPtr_address <= tmp_3_fu_101_p1(32 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            inPtr_address <= tmp_1_fu_85_p1(32 - 1 downto 0);
        else 
            inPtr_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inPtr_dataout <= tmp_2_reg_143;

    -- inPtr_req_din assign process. --
    inPtr_req_din_assign_proc : process(ap_CS_fsm, inPtr_req_full_n)
    begin
        if ((((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((inPtr_req_full_n = ap_const_logic_0))))) then 
            inPtr_req_din <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            inPtr_req_din <= ap_const_logic_0;
        else 
            inPtr_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- inPtr_req_write assign process. --
    inPtr_req_write_assign_proc : process(ap_CS_fsm, inPtr_req_full_n)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((inPtr_req_full_n = ap_const_logic_0))))) then 
            inPtr_req_write <= ap_const_logic_1;
        else 
            inPtr_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- inPtr_rsp_read assign process. --
    inPtr_rsp_read_assign_proc : process(ap_CS_fsm, inPtr_rsp_empty_n)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((inPtr_rsp_empty_n = ap_const_logic_0)))) then 
            inPtr_rsp_read <= ap_const_logic_1;
        else 
            inPtr_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    inPtr_size <= ap_const_lv32_1;
    
    i_fu_42_temp <= signed(i_fu_42);
    tmp_1_fu_85_p1 <= std_logic_vector(resize(i_fu_42_temp,64));

    tmp_2_fu_96_p2 <= std_logic_vector(unsigned(inPtr_addr_read_reg_138) + unsigned(ap_const_lv32_A));
    
    i_load_2_reg_148_temp <= signed(i_load_2_reg_148);
    tmp_3_fu_101_p1 <= std_logic_vector(resize(i_load_2_reg_148_temp,64));

    tmp_fu_69_p4 <= i_fu_42(31 downto 5);
end behav;
