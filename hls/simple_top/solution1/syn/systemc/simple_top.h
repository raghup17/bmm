// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _simple_top_HH_
#define _simple_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct simple_top : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > inPtr_req_din;
    sc_in< sc_logic > inPtr_req_full_n;
    sc_out< sc_logic > inPtr_req_write;
    sc_in< sc_logic > inPtr_rsp_empty_n;
    sc_out< sc_logic > inPtr_rsp_read;
    sc_out< sc_lv<32> > inPtr_address;
    sc_in< sc_lv<32> > inPtr_datain;
    sc_out< sc_lv<32> > inPtr_dataout;
    sc_out< sc_lv<32> > inPtr_size;


    // Module declarations
    simple_top(sc_module_name name);
    SC_HAS_PROCESS(simple_top);

    ~simple_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_lv<32> > inPtr_addr_read_reg_138;
    sc_signal< sc_lv<32> > tmp_2_fu_96_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_143;
    sc_signal< sc_lv<32> > i_load_2_reg_148;
    sc_signal< sc_lv<64> > tmp_1_fu_85_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_101_p1;
    sc_signal< sc_lv<32> > i_fu_42;
    sc_signal< sc_lv<32> > i_1_fu_111_p2;
    sc_signal< sc_lv<27> > tmp_fu_69_p4;
    sc_signal< sc_lv<1> > icmp_fu_79_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<4> ap_ST_st5_fsm_4;
    static const sc_lv<4> ap_ST_st6_fsm_5;
    static const sc_lv<4> ap_ST_st7_fsm_6;
    static const sc_lv<4> ap_ST_st8_fsm_7;
    static const sc_lv<4> ap_ST_st9_fsm_8;
    static const sc_lv<4> ap_ST_st10_fsm_9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<27> ap_const_lv27_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_1_fu_111_p2();
    void thread_icmp_fu_79_p2();
    void thread_inPtr_address();
    void thread_inPtr_dataout();
    void thread_inPtr_req_din();
    void thread_inPtr_req_write();
    void thread_inPtr_rsp_read();
    void thread_inPtr_size();
    void thread_tmp_1_fu_85_p1();
    void thread_tmp_2_fu_96_p2();
    void thread_tmp_3_fu_101_p1();
    void thread_tmp_fu_69_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
