// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "simple_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic simple_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic simple_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> simple_top::ap_ST_st1_fsm_0 = "0000";
const sc_lv<4> simple_top::ap_ST_st2_fsm_1 = "1";
const sc_lv<4> simple_top::ap_ST_st3_fsm_2 = "10";
const sc_lv<4> simple_top::ap_ST_st4_fsm_3 = "11";
const sc_lv<4> simple_top::ap_ST_st5_fsm_4 = "100";
const sc_lv<4> simple_top::ap_ST_st6_fsm_5 = "101";
const sc_lv<4> simple_top::ap_ST_st7_fsm_6 = "110";
const sc_lv<4> simple_top::ap_ST_st8_fsm_7 = "111";
const sc_lv<4> simple_top::ap_ST_st9_fsm_8 = "1000";
const sc_lv<4> simple_top::ap_ST_st10_fsm_9 = "1001";
const sc_lv<32> simple_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> simple_top::ap_const_lv32_1 = "1";
const sc_lv<32> simple_top::ap_const_lv32_5 = "101";
const sc_lv<32> simple_top::ap_const_lv32_1F = "11111";
const sc_lv<27> simple_top::ap_const_lv27_1 = "1";
const sc_lv<32> simple_top::ap_const_lv32_A = "1010";
const sc_lv<1> simple_top::ap_const_lv1_0 = "0";

simple_top::simple_top(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( icmp_fu_79_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( icmp_fu_79_p2 );

    SC_METHOD(thread_i_1_fu_111_p2);
    sensitive << ( i_fu_42 );

    SC_METHOD(thread_icmp_fu_79_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_69_p4 );

    SC_METHOD(thread_inPtr_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );
    sensitive << ( tmp_1_fu_85_p1 );
    sensitive << ( tmp_3_fu_101_p1 );

    SC_METHOD(thread_inPtr_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );
    sensitive << ( tmp_2_reg_143 );

    SC_METHOD(thread_inPtr_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );

    SC_METHOD(thread_inPtr_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );

    SC_METHOD(thread_inPtr_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_rsp_empty_n );

    SC_METHOD(thread_inPtr_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );

    SC_METHOD(thread_tmp_1_fu_85_p1);
    sensitive << ( i_fu_42 );

    SC_METHOD(thread_tmp_2_fu_96_p2);
    sensitive << ( inPtr_addr_read_reg_138 );

    SC_METHOD(thread_tmp_3_fu_101_p1);
    sensitive << ( i_load_2_reg_148 );

    SC_METHOD(thread_tmp_fu_69_p4);
    sensitive << ( i_fu_42 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( inPtr_req_full_n );
    sensitive << ( inPtr_rsp_empty_n );
    sensitive << ( icmp_fu_79_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "simple_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inPtr_req_din, "(port)inPtr_req_din");
    sc_trace(mVcdFile, inPtr_req_full_n, "(port)inPtr_req_full_n");
    sc_trace(mVcdFile, inPtr_req_write, "(port)inPtr_req_write");
    sc_trace(mVcdFile, inPtr_rsp_empty_n, "(port)inPtr_rsp_empty_n");
    sc_trace(mVcdFile, inPtr_rsp_read, "(port)inPtr_rsp_read");
    sc_trace(mVcdFile, inPtr_address, "(port)inPtr_address");
    sc_trace(mVcdFile, inPtr_datain, "(port)inPtr_datain");
    sc_trace(mVcdFile, inPtr_dataout, "(port)inPtr_dataout");
    sc_trace(mVcdFile, inPtr_size, "(port)inPtr_size");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, inPtr_addr_read_reg_138, "inPtr_addr_read_reg_138");
    sc_trace(mVcdFile, tmp_2_fu_96_p2, "tmp_2_fu_96_p2");
    sc_trace(mVcdFile, tmp_2_reg_143, "tmp_2_reg_143");
    sc_trace(mVcdFile, i_load_2_reg_148, "i_load_2_reg_148");
    sc_trace(mVcdFile, tmp_1_fu_85_p1, "tmp_1_fu_85_p1");
    sc_trace(mVcdFile, tmp_3_fu_101_p1, "tmp_3_fu_101_p1");
    sc_trace(mVcdFile, i_fu_42, "i_fu_42");
    sc_trace(mVcdFile, i_1_fu_111_p2, "i_1_fu_111_p2");
    sc_trace(mVcdFile, tmp_fu_69_p4, "tmp_fu_69_p4");
    sc_trace(mVcdFile, icmp_fu_79_p2, "icmp_fu_79_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
    mHdltvinHandle.open("simple_top.hdltvin.dat");
    mHdltvoutHandle.open("simple_top.hdltvout.dat");
}

simple_top::~simple_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void simple_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(inPtr_req_full_n.read(), ap_const_logic_0))) {
        i_fu_42 = i_1_fu_111_p2.read();
    } else if ((esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_fu_42 = ap_const_lv32_0;
    }
    if (esl_seteq<1,4,4>(ap_ST_st9_fsm_8, ap_CS_fsm.read())) {
        i_load_2_reg_148 = i_fu_42.read();
        tmp_2_reg_143 = tmp_2_fu_96_p2.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(inPtr_rsp_empty_n.read(), ap_const_logic_0))) {
        inPtr_addr_read_reg_138 = inPtr_datain.read();
    }
}

void simple_top::thread_ap_done() {
    if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(icmp_fu_79_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void simple_top::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void simple_top::thread_ap_ready() {
    if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(icmp_fu_79_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void simple_top::thread_i_1_fu_111_p2() {
    i_1_fu_111_p2 = (!i_fu_42.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_fu_42.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void simple_top::thread_icmp_fu_79_p2() {
    icmp_fu_79_p2 = (!tmp_fu_69_p4.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<1>(): (sc_bigint<27>(tmp_fu_69_p4.read()) < sc_bigint<27>(ap_const_lv27_1));
}

void simple_top::thread_inPtr_address() {
    if ((esl_seteq<1,4,4>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(inPtr_req_full_n.read(), ap_const_logic_0))) {
        inPtr_address =  (sc_lv<32>) (tmp_3_fu_101_p1.read());
    } else if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        inPtr_address =  (sc_lv<32>) (tmp_1_fu_85_p1.read());
    } else {
        inPtr_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void simple_top::thread_inPtr_dataout() {
    inPtr_dataout = tmp_2_reg_143.read();
}

void simple_top::thread_inPtr_req_din() {
    if (((esl_seteq<1,4,4>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(inPtr_req_full_n.read(), ap_const_logic_0)))) {
        inPtr_req_din = ap_const_logic_1;
    } else if (esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        inPtr_req_din = ap_const_logic_0;
    } else {
        inPtr_req_din = ap_const_logic_0;
    }
}

void simple_top::thread_inPtr_req_write() {
    if ((esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) || 
         (esl_seteq<1,4,4>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(inPtr_req_full_n.read(), ap_const_logic_0)))) {
        inPtr_req_write = ap_const_logic_1;
    } else {
        inPtr_req_write = ap_const_logic_0;
    }
}

void simple_top::thread_inPtr_rsp_read() {
    if ((esl_seteq<1,4,4>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(inPtr_rsp_empty_n.read(), ap_const_logic_0))) {
        inPtr_rsp_read = ap_const_logic_1;
    } else {
        inPtr_rsp_read = ap_const_logic_0;
    }
}

void simple_top::thread_inPtr_size() {
    inPtr_size = ap_const_lv32_1;
}

void simple_top::thread_tmp_1_fu_85_p1() {
    tmp_1_fu_85_p1 = esl_sext<64,32>(i_fu_42.read());
}

void simple_top::thread_tmp_2_fu_96_p2() {
    tmp_2_fu_96_p2 = (!inPtr_addr_read_reg_138.read().is_01() || !ap_const_lv32_A.is_01())? sc_lv<32>(): (sc_bigint<32>(inPtr_addr_read_reg_138.read()) + sc_biguint<32>(ap_const_lv32_A));
}

void simple_top::thread_tmp_3_fu_101_p1() {
    tmp_3_fu_101_p1 = esl_sext<64,32>(i_load_2_reg_148.read());
}

void simple_top::thread_tmp_fu_69_p4() {
    tmp_fu_69_p4 = i_fu_42.read().range(31, 5);
}

void simple_top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (esl_seteq<1,1,1>(icmp_fu_79_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            if (!esl_seteq<1,1,1>(inPtr_rsp_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            if (!esl_seteq<1,1,1>(inPtr_req_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}
void simple_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_req_din\" :  \"" << inPtr_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inPtr_req_full_n\" :  \"" << inPtr_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_req_write\" :  \"" << inPtr_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inPtr_rsp_empty_n\" :  \"" << inPtr_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_rsp_read\" :  \"" << inPtr_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_address\" :  \"" << inPtr_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inPtr_datain\" :  \"" << inPtr_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_dataout\" :  \"" << inPtr_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inPtr_size\" :  \"" << inPtr_size.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

