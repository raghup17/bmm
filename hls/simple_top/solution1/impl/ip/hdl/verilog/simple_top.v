// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simple_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module simple_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inPtr_req_din,
        inPtr_req_full_n,
        inPtr_req_write,
        inPtr_rsp_empty_n,
        inPtr_rsp_read,
        inPtr_address,
        inPtr_datain,
        inPtr_dataout,
        inPtr_size
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   inPtr_req_din;
input   inPtr_req_full_n;
output   inPtr_req_write;
input   inPtr_rsp_empty_n;
output   inPtr_rsp_read;
output  [31:0] inPtr_address;
input  [31:0] inPtr_datain;
output  [31:0] inPtr_dataout;
output  [31:0] inPtr_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inPtr_req_din;
reg inPtr_req_write;
reg inPtr_rsp_read;
reg[31:0] inPtr_address;
reg   [3:0] ap_CS_fsm = 4'b0000;
reg   [31:0] inPtr_addr_read_reg_138;
wire   [31:0] tmp_2_fu_96_p2;
reg   [31:0] tmp_2_reg_143;
reg   [31:0] i_load_2_reg_148;
wire   [63:0] tmp_1_fu_85_p1;
wire   [63:0] tmp_3_fu_101_p1;
reg   [31:0] i_fu_42;
wire   [31:0] i_1_fu_111_p2;
wire   [26:0] tmp_fu_69_p4;
wire   [0:0] icmp_fu_79_p2;
reg   [3:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b1;
parameter    ap_ST_st3_fsm_2 = 4'b10;
parameter    ap_ST_st4_fsm_3 = 4'b11;
parameter    ap_ST_st5_fsm_4 = 4'b100;
parameter    ap_ST_st6_fsm_5 = 4'b101;
parameter    ap_ST_st7_fsm_6 = 4'b110;
parameter    ap_ST_st8_fsm_7 = 4'b111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_ST_st10_fsm_9 = 4'b1001;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv27_1 = 27'b1;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(inPtr_req_full_n == ap_const_logic_0))) begin
        i_fu_42 <= i_1_fu_111_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_fu_42 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        i_load_2_reg_148 <= i_fu_42;
        tmp_2_reg_143 <= tmp_2_fu_96_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(inPtr_rsp_empty_n == ap_const_logic_0))) begin
        inPtr_addr_read_reg_138 <= inPtr_datain;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or icmp_fu_79_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (icmp_fu_79_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or icmp_fu_79_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (icmp_fu_79_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// inPtr_address assign process. ///
always @ (ap_CS_fsm or inPtr_req_full_n or tmp_1_fu_85_p1 or tmp_3_fu_101_p1)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(inPtr_req_full_n == ap_const_logic_0))) begin
        inPtr_address = tmp_3_fu_101_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        inPtr_address = tmp_1_fu_85_p1;
    end else begin
        inPtr_address = 'bx;
    end
end

/// inPtr_req_din assign process. ///
always @ (ap_CS_fsm or inPtr_req_full_n)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(inPtr_req_full_n == ap_const_logic_0))) begin
        inPtr_req_din = ap_const_logic_1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        inPtr_req_din = ap_const_logic_0;
    end else begin
        inPtr_req_din = ap_const_logic_0;
    end
end

/// inPtr_req_write assign process. ///
always @ (ap_CS_fsm or inPtr_req_full_n)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(inPtr_req_full_n == ap_const_logic_0)))) begin
        inPtr_req_write = ap_const_logic_1;
    end else begin
        inPtr_req_write = ap_const_logic_0;
    end
end

/// inPtr_rsp_read assign process. ///
always @ (ap_CS_fsm or inPtr_rsp_empty_n)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(inPtr_rsp_empty_n == ap_const_logic_0))) begin
        inPtr_rsp_read = ap_const_logic_1;
    end else begin
        inPtr_rsp_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or inPtr_req_full_n or inPtr_rsp_empty_n or icmp_fu_79_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((icmp_fu_79_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            if (~(inPtr_rsp_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            if (~(inPtr_req_full_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign i_1_fu_111_p2 = (i_fu_42 + ap_const_lv32_1);
assign icmp_fu_79_p2 = ($signed(tmp_fu_69_p4) < $signed(27'b1)? 1'b1: 1'b0);
assign inPtr_dataout = tmp_2_reg_143;
assign inPtr_size = ap_const_lv32_1;
assign tmp_1_fu_85_p1 = $signed(i_fu_42);
assign tmp_2_fu_96_p2 = (inPtr_addr_read_reg_138 + ap_const_lv32_A);
assign tmp_3_fu_101_p1 = $signed(i_load_2_reg_148);
assign tmp_fu_69_p4 = {{i_fu_42[ap_const_lv32_1F : ap_const_lv32_5]}};


endmodule //simple_top

