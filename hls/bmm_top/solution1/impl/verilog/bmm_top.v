// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bmm_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module bmm_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b1_req_din,
        b1_req_full_n,
        b1_req_write,
        b1_rsp_empty_n,
        b1_rsp_read,
        b1_address,
        b1_datain,
        b1_dataout,
        b1_size,
        b2_req_din,
        b2_req_full_n,
        b2_req_write,
        b2_rsp_empty_n,
        b2_rsp_read,
        b2_address,
        b2_datain,
        b2_dataout,
        b2_size,
        b3_req_din,
        b3_req_full_n,
        b3_req_write,
        b3_rsp_empty_n,
        b3_rsp_read,
        b3_address,
        b3_datain,
        b3_dataout,
        b3_size,
        blockSize,
        blockSize_ap_vld,
        blockSize_ap_ack
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   b1_req_din;
input   b1_req_full_n;
output   b1_req_write;
input   b1_rsp_empty_n;
output   b1_rsp_read;
output  [31:0] b1_address;
input  [255:0] b1_datain;
output  [255:0] b1_dataout;
output  [31:0] b1_size;
output   b2_req_din;
input   b2_req_full_n;
output   b2_req_write;
input   b2_rsp_empty_n;
output   b2_rsp_read;
output  [31:0] b2_address;
input  [255:0] b2_datain;
output  [255:0] b2_dataout;
output  [31:0] b2_size;
output   b3_req_din;
input   b3_req_full_n;
output   b3_req_write;
input   b3_rsp_empty_n;
output   b3_rsp_read;
output  [31:0] b3_address;
input  [255:0] b3_datain;
output  [255:0] b3_dataout;
output  [31:0] b3_size;
input  [31:0] blockSize;
input   blockSize_ap_vld;
output   blockSize_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b1_req_write;
reg b1_rsp_read;
reg b2_req_write;
reg b2_rsp_read;
reg b3_req_din;
reg b3_req_write;
reg b3_rsp_read;
reg[31:0] b3_address;
reg blockSize_ap_ack;
reg   [4:0] ap_CS_fsm = 5'b00000;
reg   [31:0] blockSize_read_reg_364;
reg    ap_sig_bdd_82;
wire   [31:0] dim_cast_fu_251_p1;
reg   [31:0] dim_cast_reg_370;
wire   [31:0] t1_1_fu_265_p2;
reg   [31:0] t1_1_reg_384;
wire   [31:0] tmp_5_fu_271_p2;
reg   [31:0] tmp_5_reg_389;
wire   [0:0] tmp_4_fu_260_p2;
wire   [31:0] j_1_fu_299_p2;
reg   [31:0] j_1_reg_409;
wire   [31:0] t1_2_fu_310_p2;
reg   [31:0] t1_2_reg_417;
wire   [31:0] tmp_8_fu_316_p2;
reg   [31:0] tmp_8_reg_422;
wire   [0:0] tmp_2_fu_305_p2;
wire   [31:0] t1_3_fu_337_p2;
reg   [31:0] t1_3_reg_436;
wire   [31:0] tmp_10_fu_343_p2;
reg   [31:0] tmp_10_reg_441;
wire   [0:0] tmp_7_fu_332_p2;
wire   [31:0] i_1_fu_349_p2;
reg   [31:0] i_reg_119;
reg   [31:0] t1_reg_131;
reg    ap_sig_bdd_138;
wire   [0:0] tmp_3_fu_255_p2;
reg   [31:0] j_reg_142;
reg   [31:0] t_reg_154;
wire   [0:0] tmp_s_fu_294_p2;
reg   [31:0] t3_reg_165;
wire   [63:0] tmp_6_fu_277_p1;
wire   [63:0] tmp_9_fu_322_p1;
wire   [63:0] tmp_11_fu_354_p1;
wire   [31:0] p_neg_fu_185_p2;
wire   [23:0] tmp_1_fu_191_p4;
wire   [24:0] p_lshr_cast_fu_201_p1;
wire   [23:0] tmp_12_fu_211_p4;
wire   [0:0] tmp_14_fu_177_p3;
wire   [24:0] p_neg_t_fu_205_p2;
wire   [24:0] p_lshr_f_cast_fu_221_p1;
wire   [24:0] tmp_fu_225_p3;
wire   [22:0] tmp_13_fu_233_p4;
wire   [25:0] dim_fu_243_p3;
reg   [4:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv256_lc_1 = 256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv25_0 = 25'b0000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_7_fu_332_p2))) begin
        i_reg_119 <= i_1_fu_349_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_82)) begin
        i_reg_119 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_2_fu_305_p2))) begin
        j_reg_142 <= j_1_reg_409;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_4_fu_260_p2 == ap_const_lv1_0))) begin
        j_reg_142 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_3_fu_255_p2))) begin
        t1_reg_131 <= ap_const_lv32_0;
    end else if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~ap_sig_bdd_138)) begin
        t1_reg_131 <= t1_1_reg_384;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_s_fu_294_p2))) begin
        t3_reg_165 <= ap_const_lv32_0;
    end else if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(b3_req_full_n == ap_const_logic_0))) begin
        t3_reg_165 <= t1_3_reg_436;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_s_fu_294_p2))) begin
        t_reg_154 <= ap_const_lv32_0;
    end else if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(b2_rsp_empty_n == ap_const_logic_0))) begin
        t_reg_154 <= t1_2_reg_417;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_82)) begin
        blockSize_read_reg_364 <= blockSize;
        dim_cast_reg_370[3] <= dim_cast_fu_251_p1[3];
dim_cast_reg_370[4] <= dim_cast_fu_251_p1[4];
dim_cast_reg_370[5] <= dim_cast_fu_251_p1[5];
dim_cast_reg_370[6] <= dim_cast_fu_251_p1[6];
dim_cast_reg_370[7] <= dim_cast_fu_251_p1[7];
dim_cast_reg_370[8] <= dim_cast_fu_251_p1[8];
dim_cast_reg_370[9] <= dim_cast_fu_251_p1[9];
dim_cast_reg_370[10] <= dim_cast_fu_251_p1[10];
dim_cast_reg_370[11] <= dim_cast_fu_251_p1[11];
dim_cast_reg_370[12] <= dim_cast_fu_251_p1[12];
dim_cast_reg_370[13] <= dim_cast_fu_251_p1[13];
dim_cast_reg_370[14] <= dim_cast_fu_251_p1[14];
dim_cast_reg_370[15] <= dim_cast_fu_251_p1[15];
dim_cast_reg_370[16] <= dim_cast_fu_251_p1[16];
dim_cast_reg_370[17] <= dim_cast_fu_251_p1[17];
dim_cast_reg_370[18] <= dim_cast_fu_251_p1[18];
dim_cast_reg_370[19] <= dim_cast_fu_251_p1[19];
dim_cast_reg_370[20] <= dim_cast_fu_251_p1[20];
dim_cast_reg_370[21] <= dim_cast_fu_251_p1[21];
dim_cast_reg_370[22] <= dim_cast_fu_251_p1[22];
dim_cast_reg_370[23] <= dim_cast_fu_251_p1[23];
dim_cast_reg_370[24] <= dim_cast_fu_251_p1[24];
dim_cast_reg_370[25] <= dim_cast_fu_251_p1[25];
dim_cast_reg_370[26] <= dim_cast_fu_251_p1[26];
dim_cast_reg_370[27] <= dim_cast_fu_251_p1[27];
dim_cast_reg_370[28] <= dim_cast_fu_251_p1[28];
dim_cast_reg_370[29] <= dim_cast_fu_251_p1[29];
dim_cast_reg_370[30] <= dim_cast_fu_251_p1[30];
dim_cast_reg_370[31] <= dim_cast_fu_251_p1[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        j_1_reg_409 <= j_1_fu_299_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        t1_1_reg_384 <= t1_1_fu_265_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
        t1_2_reg_417 <= t1_2_fu_310_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        t1_3_reg_436 <= t1_3_fu_337_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st18_fsm_17 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_7_fu_332_p2))) begin
        tmp_10_reg_441 <= tmp_10_fu_343_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_4_fu_260_p2 == ap_const_lv1_0))) begin
        tmp_5_reg_389 <= tmp_5_fu_271_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_2_fu_305_p2))) begin
        tmp_8_reg_422 <= tmp_8_fu_316_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_3_fu_255_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_3_fu_255_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_3_fu_255_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_3_fu_255_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// b1_req_write assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        b1_req_write = ap_const_logic_1;
    end else begin
        b1_req_write = ap_const_logic_0;
    end
end

/// b1_rsp_read assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_138)
begin
    if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~ap_sig_bdd_138)) begin
        b1_rsp_read = ap_const_logic_1;
    end else begin
        b1_rsp_read = ap_const_logic_0;
    end
end

/// b2_req_write assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        b2_req_write = ap_const_logic_1;
    end else begin
        b2_req_write = ap_const_logic_0;
    end
end

/// b2_rsp_read assign process. ///
always @ (ap_CS_fsm or b2_rsp_empty_n)
begin
    if (((ap_ST_st17_fsm_16 == ap_CS_fsm) & ~(b2_rsp_empty_n == ap_const_logic_0))) begin
        b2_rsp_read = ap_const_logic_1;
    end else begin
        b2_rsp_read = ap_const_logic_0;
    end
end

/// b3_address assign process. ///
always @ (ap_CS_fsm or b3_req_full_n or tmp_6_fu_277_p1 or tmp_11_fu_354_p1)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(b3_req_full_n == ap_const_logic_0))) begin
        b3_address = tmp_11_fu_354_p1;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        b3_address = tmp_6_fu_277_p1;
    end else begin
        b3_address = 'bx;
    end
end

/// b3_req_din assign process. ///
always @ (ap_CS_fsm or b3_req_full_n)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(b3_req_full_n == ap_const_logic_0))) begin
        b3_req_din = ap_const_logic_1;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        b3_req_din = ap_const_logic_0;
    end else begin
        b3_req_din = ap_const_logic_0;
    end
end

/// b3_req_write assign process. ///
always @ (ap_CS_fsm or b3_req_full_n)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | ((ap_ST_st19_fsm_18 == ap_CS_fsm) & ~(b3_req_full_n == ap_const_logic_0)))) begin
        b3_req_write = ap_const_logic_1;
    end else begin
        b3_req_write = ap_const_logic_0;
    end
end

/// b3_rsp_read assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_138)
begin
    if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~ap_sig_bdd_138)) begin
        b3_rsp_read = ap_const_logic_1;
    end else begin
        b3_rsp_read = ap_const_logic_0;
    end
end

/// blockSize_ap_ack assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_82)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_82)) begin
        blockSize_ap_ack = ap_const_logic_1;
    end else begin
        blockSize_ap_ack = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or b2_rsp_empty_n or b3_req_full_n or ap_sig_bdd_82 or tmp_4_fu_260_p2 or tmp_2_fu_305_p2 or tmp_7_fu_332_p2 or ap_sig_bdd_138 or tmp_3_fu_255_p2 or tmp_s_fu_294_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_82) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((ap_const_lv1_0 == tmp_3_fu_255_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            if ((tmp_4_fu_260_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            if (~ap_sig_bdd_138) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        ap_ST_st10_fsm_9 : 
            if ((ap_const_lv1_0 == tmp_s_fu_294_p2)) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        ap_ST_st11_fsm_10 : 
            if (~(ap_const_lv1_0 == tmp_2_fu_305_p2)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
        ap_ST_st17_fsm_16 : 
            if (~(b2_rsp_empty_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        ap_ST_st18_fsm_17 : 
            if ((ap_const_lv1_0 == tmp_7_fu_332_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        ap_ST_st19_fsm_18 : 
            if (~(b3_req_full_n == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_138 assign process. ///
always @ (b1_rsp_empty_n or b3_rsp_empty_n)
begin
    ap_sig_bdd_138 = ((b1_rsp_empty_n == ap_const_logic_0) | (b3_rsp_empty_n == ap_const_logic_0));
end

/// ap_sig_bdd_82 assign process. ///
always @ (ap_start or blockSize_ap_vld)
begin
    ap_sig_bdd_82 = ((blockSize_ap_vld == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end
assign b1_address = tmp_6_fu_277_p1;
assign b1_dataout = ap_const_lv256_lc_1;
assign b1_req_din = ap_const_logic_0;
assign b1_size = ap_const_lv32_1;
assign b2_address = tmp_9_fu_322_p1;
assign b2_dataout = ap_const_lv256_lc_1;
assign b2_req_din = ap_const_logic_0;
assign b2_size = ap_const_lv32_1;
assign b3_dataout = ap_const_lv256_lc_1;
assign b3_size = ap_const_lv32_1;
assign dim_cast_fu_251_p1 = $signed(dim_fu_243_p3);
assign dim_fu_243_p3 = {{tmp_13_fu_233_p4}, {ap_const_lv3_0}};
assign i_1_fu_349_p2 = (i_reg_119 + dim_cast_reg_370);
assign j_1_fu_299_p2 = (j_reg_142 + ap_const_lv32_1);
assign p_lshr_cast_fu_201_p1 = $unsigned(tmp_1_fu_191_p4);
assign p_lshr_f_cast_fu_221_p1 = $unsigned(tmp_12_fu_211_p4);
assign p_neg_fu_185_p2 = (ap_const_lv32_0 - blockSize);
assign p_neg_t_fu_205_p2 = (ap_const_lv25_0 - p_lshr_cast_fu_201_p1);
assign t1_1_fu_265_p2 = (t1_reg_131 + ap_const_lv32_1);
assign t1_2_fu_310_p2 = (t_reg_154 + ap_const_lv32_1);
assign t1_3_fu_337_p2 = (t3_reg_165 + ap_const_lv32_1);
assign tmp_10_fu_343_p2 = (t3_reg_165 + i_reg_119);
assign tmp_11_fu_354_p1 = $signed(tmp_10_reg_441);
assign tmp_12_fu_211_p4 = {{blockSize[ap_const_lv32_1F : ap_const_lv32_8]}};
assign tmp_13_fu_233_p4 = {{tmp_fu_225_p3[ap_const_lv32_18 : ap_const_lv32_2]}};
assign tmp_14_fu_177_p3 = blockSize[ap_const_lv32_1F];
assign tmp_1_fu_191_p4 = {{p_neg_fu_185_p2[ap_const_lv32_1F : ap_const_lv32_8]}};
assign tmp_2_fu_305_p2 = ($signed(t_reg_154) < $signed(dim_cast_reg_370)? 1'b1: 1'b0);
assign tmp_3_fu_255_p2 = ($signed(i_reg_119) < $signed(blockSize_read_reg_364)? 1'b1: 1'b0);
assign tmp_4_fu_260_p2 = ($signed(t1_reg_131) < $signed(dim_cast_reg_370)? 1'b1: 1'b0);
assign tmp_5_fu_271_p2 = (t1_reg_131 + i_reg_119);
assign tmp_6_fu_277_p1 = $signed(tmp_5_reg_389);
assign tmp_7_fu_332_p2 = ($signed(t3_reg_165) < $signed(dim_cast_reg_370)? 1'b1: 1'b0);
assign tmp_8_fu_316_p2 = (t_reg_154 + j_reg_142);
assign tmp_9_fu_322_p1 = $signed(tmp_8_reg_422);
assign tmp_fu_225_p3 = ((tmp_14_fu_177_p3)? p_neg_t_fu_205_p2: p_lshr_f_cast_fu_221_p1);
assign tmp_s_fu_294_p2 = ($signed(j_reg_142) < $signed(blockSize_read_reg_364)? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    dim_cast_reg_370[2:0] <= 3'b000;
end



endmodule //bmm_top

