-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bmm_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b1_req_din : OUT STD_LOGIC;
    b1_req_full_n : IN STD_LOGIC;
    b1_req_write : OUT STD_LOGIC;
    b1_rsp_empty_n : IN STD_LOGIC;
    b1_rsp_read : OUT STD_LOGIC;
    b1_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    b1_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    b1_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    b1_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    b2_req_din : OUT STD_LOGIC;
    b2_req_full_n : IN STD_LOGIC;
    b2_req_write : OUT STD_LOGIC;
    b2_rsp_empty_n : IN STD_LOGIC;
    b2_rsp_read : OUT STD_LOGIC;
    b2_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    b2_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    b2_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    b2_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    b3_req_din : OUT STD_LOGIC;
    b3_req_full_n : IN STD_LOGIC;
    b3_req_write : OUT STD_LOGIC;
    b3_rsp_empty_n : IN STD_LOGIC;
    b3_rsp_read : OUT STD_LOGIC;
    b3_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    b3_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    b3_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    b3_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bmm_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bmm_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3448961,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_1_fu_142_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_266 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_152_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_reg_271 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond3_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_280 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_fu_172_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_reg_285 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_182_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_1_reg_294 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_192_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_reg_299 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_reg_304 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_309 : STD_LOGIC_VECTOR (11 downto 0);
    signal b1_addr_read_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_121 : BOOLEAN;
    signal b2_addr_read_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmpVal_1_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_addr_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_addr_read_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_90 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_101 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_112 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmpVal_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_148_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_cast_fu_188_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_197_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_201_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component bmm_top_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    bmm_top_mul_32s_32s_32_6_U1 : component bmm_top_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_90 assign process. --
    i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_160_p2)))) then 
                i_reg_90 <= i_1_reg_266;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_90 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_reg_101 assign process. --
    j_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_136_p2 = ap_const_lv1_0))) then 
                j_reg_101 <= ap_const_lv7_0;
            elsif (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((b3_req_full_n = ap_const_logic_0)))) then 
                j_reg_101 <= j_1_reg_280;
            end if; 
        end if;
    end process;

    -- k_reg_112 assign process. --
    k_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_160_p2))) then 
                k_reg_112 <= ap_const_lv7_0;
            elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
                k_reg_112 <= k_1_reg_294;
            end if; 
        end if;
    end process;

    -- tmpVal_reg_123 assign process. --
    tmpVal_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_160_p2))) then 
                tmpVal_reg_123 <= ap_const_lv32_0;
            elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
                tmpVal_reg_123 <= tmpVal_1_fu_242_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_121))) then
                b1_addr_read_reg_326 <= b1_datain;
                b2_addr_read_reg_331 <= b2_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st22_fsm_21 = ap_CS_fsm) and not((b3_rsp_empty_n = ap_const_logic_0)))) then
                b3_addr_read_reg_347 <= b3_datain;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                b3_addr_reg_341(0) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(0);
    b3_addr_reg_341(1) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(1);
    b3_addr_reg_341(2) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(2);
    b3_addr_reg_341(3) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(3);
    b3_addr_reg_341(4) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(4);
    b3_addr_reg_341(5) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(5);
    b3_addr_reg_341(6) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(6);
    b3_addr_reg_341(7) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(7);
    b3_addr_reg_341(8) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(8);
    b3_addr_reg_341(9) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(9);
    b3_addr_reg_341(10) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(10);
    b3_addr_reg_341(11) <= tmp_4_cast_fu_248_p1(32 - 1 downto 0)(11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_1_reg_266 <= i_1_fu_142_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                j_1_reg_280 <= j_1_fu_166_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                k_1_reg_294 <= k_1_fu_182_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_160_p2))) then
                tmp_2_cast_reg_285(0) <= tmp_2_cast_fu_172_p1(0);
    tmp_2_cast_reg_285(1) <= tmp_2_cast_fu_172_p1(1);
    tmp_2_cast_reg_285(2) <= tmp_2_cast_fu_172_p1(2);
    tmp_2_cast_reg_285(3) <= tmp_2_cast_fu_172_p1(3);
    tmp_2_cast_reg_285(4) <= tmp_2_cast_fu_172_p1(4);
    tmp_2_cast_reg_285(5) <= tmp_2_cast_fu_172_p1(5);
    tmp_2_cast_reg_285(6) <= tmp_2_cast_fu_172_p1(6);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then
                tmp_3_reg_352 <= tmp_3_fu_258_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_176_p2)))) then
                tmp_4_reg_309 <= tmp_4_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_136_p2 = ap_const_lv1_0))) then
                tmp_7_reg_271(6) <= tmp_7_fu_152_p3(6);
    tmp_7_reg_271(7) <= tmp_7_fu_152_p3(7);
    tmp_7_reg_271(8) <= tmp_7_fu_152_p3(8);
    tmp_7_reg_271(9) <= tmp_7_fu_152_p3(9);
    tmp_7_reg_271(10) <= tmp_7_fu_152_p3(10);
    tmp_7_reg_271(11) <= tmp_7_fu_152_p3(11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_176_p2))) then
                tmp_8_reg_299 <= tmp_8_fu_192_p2;
                tmp_s_reg_304 <= tmp_s_fu_209_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_271(5 downto 0) <= "000000";
    tmp_2_cast_reg_285(11 downto 7) <= "00000";
    b3_addr_reg_341(31 downto 12) <= "00000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , b3_req_full_n , b3_rsp_empty_n , exitcond3_fu_136_p2 , exitcond2_fu_160_p2 , exitcond_fu_176_p2 , ap_sig_bdd_121)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_136_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond2_fu_160_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_176_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not(ap_sig_bdd_121)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if (not((b3_rsp_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not((b3_req_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond3_fu_136_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond3_fu_136_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond3_fu_136_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond3_fu_136_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(b1_rsp_empty_n, b2_rsp_empty_n)
    begin
                ap_sig_bdd_121 <= ((b1_rsp_empty_n = ap_const_logic_0) or (b2_rsp_empty_n = ap_const_logic_0));
    end process;

    b1_address <= tmp_8_cast_fu_218_p1(32 - 1 downto 0);
    b1_dataout <= ap_const_lv32_0;
    b1_req_din <= ap_const_logic_0;

    -- b1_req_write assign process. --
    b1_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            b1_req_write <= ap_const_logic_1;
        else 
            b1_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- b1_rsp_read assign process. --
    b1_rsp_read_assign_proc : process(ap_CS_fsm, ap_sig_bdd_121)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_121))) then 
            b1_rsp_read <= ap_const_logic_1;
        else 
            b1_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    b1_size <= ap_const_lv32_1;
    b2_address <= tmp_cast_fu_228_p1(32 - 1 downto 0);
    b2_dataout <= ap_const_lv32_0;
    b2_req_din <= ap_const_logic_0;

    -- b2_req_write assign process. --
    b2_req_write_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            b2_req_write <= ap_const_logic_1;
        else 
            b2_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- b2_rsp_read assign process. --
    b2_rsp_read_assign_proc : process(ap_CS_fsm, ap_sig_bdd_121)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not(ap_sig_bdd_121))) then 
            b2_rsp_read <= ap_const_logic_1;
        else 
            b2_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    b2_size <= ap_const_lv32_1;

    -- b3_address assign process. --
    b3_address_assign_proc : process(ap_CS_fsm, b3_req_full_n, b3_addr_reg_341, tmp_4_cast_fu_248_p1)
    begin
        if (((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((b3_req_full_n = ap_const_logic_0)))) then 
            b3_address <= b3_addr_reg_341;
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            b3_address <= tmp_4_cast_fu_248_p1(32 - 1 downto 0);
        else 
            b3_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    b3_dataout <= tmp_3_reg_352;

    -- b3_req_din assign process. --
    b3_req_din_assign_proc : process(ap_CS_fsm, b3_req_full_n)
    begin
        if ((((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((b3_req_full_n = ap_const_logic_0))))) then 
            b3_req_din <= ap_const_logic_1;
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            b3_req_din <= ap_const_logic_0;
        else 
            b3_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- b3_req_write assign process. --
    b3_req_write_assign_proc : process(ap_CS_fsm, b3_req_full_n)
    begin
        if (((ap_ST_st17_fsm_16 = ap_CS_fsm) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((b3_req_full_n = ap_const_logic_0))))) then 
            b3_req_write <= ap_const_logic_1;
        else 
            b3_req_write <= ap_const_logic_0;
        end if; 
    end process;


    -- b3_rsp_read assign process. --
    b3_rsp_read_assign_proc : process(ap_CS_fsm, b3_rsp_empty_n)
    begin
        if (((ap_ST_st22_fsm_21 = ap_CS_fsm) and not((b3_rsp_empty_n = ap_const_logic_0)))) then 
            b3_rsp_read <= ap_const_logic_1;
        else 
            b3_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    b3_size <= ap_const_lv32_1;
    exitcond2_fu_160_p2 <= "1" when (j_reg_101 = ap_const_lv7_40) else "0";
    exitcond3_fu_136_p2 <= "1" when (i_reg_90 = ap_const_lv7_40) else "0";
    exitcond_fu_176_p2 <= "1" when (k_reg_112 = ap_const_lv7_40) else "0";
    grp_fu_238_ce <= ap_const_logic_1;
    grp_fu_238_p0 <= b2_addr_read_reg_331;
    grp_fu_238_p1 <= b1_addr_read_reg_326;
    i_1_fu_142_p2 <= std_logic_vector(unsigned(i_reg_90) + unsigned(ap_const_lv7_1));
    j_1_fu_166_p2 <= std_logic_vector(unsigned(j_reg_101) + unsigned(ap_const_lv7_1));
    k_1_fu_182_p2 <= std_logic_vector(unsigned(k_reg_112) + unsigned(ap_const_lv7_1));
    tmpVal_1_fu_242_p2 <= std_logic_vector(unsigned(grp_fu_238_p2) + unsigned(tmpVal_reg_123));
    tmp_1_fu_197_p1 <= k_reg_112(6 - 1 downto 0);
    tmp_2_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(j_reg_101),12));
    tmp_3_fu_258_p2 <= std_logic_vector(unsigned(b3_addr_read_reg_347) + unsigned(tmpVal_reg_123));
    tmp_4_cast_fu_248_p1 <= std_logic_vector(resize(unsigned(tmp_4_reg_309),64));
    tmp_4_fu_214_p2 <= std_logic_vector(unsigned(tmp_7_reg_271) + unsigned(tmp_2_cast_reg_285));
    tmp_5_cast_fu_188_p1 <= std_logic_vector(resize(unsigned(k_reg_112),12));
    tmp_7_fu_152_p3 <= (tmp_fu_148_p1 & ap_const_lv6_0);
    tmp_8_cast_fu_218_p1 <= std_logic_vector(resize(unsigned(tmp_8_reg_299),64));
    tmp_8_fu_192_p2 <= std_logic_vector(unsigned(tmp_7_reg_271) + unsigned(tmp_5_cast_fu_188_p1));
    tmp_9_fu_201_p3 <= (tmp_1_fu_197_p1 & ap_const_lv6_0);
    tmp_cast_fu_228_p1 <= std_logic_vector(resize(unsigned(tmp_s_reg_304),64));
    tmp_fu_148_p1 <= i_reg_90(6 - 1 downto 0);
    tmp_s_fu_209_p2 <= std_logic_vector(unsigned(tmp_9_fu_201_p3) + unsigned(tmp_2_cast_reg_285));
end behav;
