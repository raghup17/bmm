// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "bmm_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bmm_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic bmm_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> bmm_top::ap_ST_st1_fsm_0 = "0000";
const sc_lv<4> bmm_top::ap_ST_st2_fsm_1 = "1";
const sc_lv<4> bmm_top::ap_ST_st3_fsm_2 = "10";
const sc_lv<4> bmm_top::ap_ST_st4_fsm_3 = "11";
const sc_lv<4> bmm_top::ap_ST_st5_fsm_4 = "100";
const sc_lv<4> bmm_top::ap_ST_st6_fsm_5 = "101";
const sc_lv<4> bmm_top::ap_ST_st7_fsm_6 = "110";
const sc_lv<4> bmm_top::ap_ST_st8_fsm_7 = "111";
const sc_lv<4> bmm_top::ap_ST_st9_fsm_8 = "1000";
const sc_lv<4> bmm_top::ap_ST_st10_fsm_9 = "1001";
const sc_lv<4> bmm_top::ap_ST_st11_fsm_10 = "1010";
const sc_lv<4> bmm_top::ap_ST_st12_fsm_11 = "1011";
const sc_lv<4> bmm_top::ap_ST_st13_fsm_12 = "1100";
const sc_lv<1> bmm_top::ap_const_lv1_0 = "0";
const sc_lv<29> bmm_top::ap_const_lv29_0 = "00000000000000000000000000000";
const sc_lv<32> bmm_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> bmm_top::ap_const_lv32_1 = "1";
const sc_lv<256> bmm_top::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> bmm_top::ap_const_lv32_3 = "11";
const sc_lv<32> bmm_top::ap_const_lv32_4 = "100";
const sc_lv<32> bmm_top::ap_const_lv32_2 = "10";
const sc_lv<32> bmm_top::ap_const_lv32_5 = "101";
const sc_lv<32> bmm_top::ap_const_lv32_1F = "11111";
const sc_lv<29> bmm_top::ap_const_lv29_1 = "1";

bmm_top::bmm_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    bmm_top_mul_32s_32s_32_6_U1 = new bmm_top_mul_32s_32s_32_6<1,6,32,32,32>("bmm_top_mul_32s_32s_32_6_U1");
    bmm_top_mul_32s_32s_32_6_U1->clk(ap_clk);
    bmm_top_mul_32s_32s_32_6_U1->reset(ap_rst);
    bmm_top_mul_32s_32s_32_6_U1->din0(grp_fu_195_p0);
    bmm_top_mul_32s_32s_32_6_U1->din1(grp_fu_195_p1);
    bmm_top_mul_32s_32s_32_6_U1->ce(grp_fu_195_ce);
    bmm_top_mul_32s_32s_32_6_U1->dout(grp_fu_195_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );

    SC_METHOD(thread_ap_sig_bdd_114);
    sensitive << ( b1_req_full_n );
    sensitive << ( b2_req_full_n );
    sensitive << ( b3_req_full_n );
    sensitive << ( exitcond_fu_259_p2 );

    SC_METHOD(thread_ap_sig_bdd_126);
    sensitive << ( b1_rsp_empty_n );
    sensitive << ( b2_rsp_empty_n );
    sensitive << ( b3_rsp_empty_n );

    SC_METHOD(thread_ap_sig_bdd_144);
    sensitive << ( b1_req_full_n );
    sensitive << ( b2_req_full_n );
    sensitive << ( b3_req_full_n );

    SC_METHOD(thread_ap_sig_bdd_76);
    sensitive << ( ap_start );
    sensitive << ( blockSize_ap_vld );

    SC_METHOD(thread_b1_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( tmp_8_fu_234_p1 );
    sensitive << ( tmp_9_fu_270_p1 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b1_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );
    sensitive << ( tmp_1_fu_201_p1 );

    SC_METHOD(thread_b1_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b1_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b1_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_126 );

    SC_METHOD(thread_b1_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b2_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( tmp_8_fu_234_p1 );
    sensitive << ( tmp_9_fu_270_p1 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b2_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );
    sensitive << ( tmp_3_fu_205_p1 );

    SC_METHOD(thread_b2_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b2_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b2_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_126 );

    SC_METHOD(thread_b2_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b3_address);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( tmp_8_fu_234_p1 );
    sensitive << ( tmp_9_fu_270_p1 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b3_dataout);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );
    sensitive << ( tmp_5_fu_209_p1 );

    SC_METHOD(thread_b3_req_din);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b3_req_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_b3_rsp_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_126 );

    SC_METHOD(thread_b3_size);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_blockSize_ap_ack);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_76 );

    SC_METHOD(thread_exitcond1_fu_223_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_reg_316 );
    sensitive << ( i_reg_124 );

    SC_METHOD(thread_exitcond_fu_259_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_reg_316 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( i5_reg_135 );

    SC_METHOD(thread_grp_fu_195_ce);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( ap_sig_bdd_144 );

    SC_METHOD(thread_grp_fu_195_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_grp_fu_195_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_i_1_fu_228_p2);
    sensitive << ( i_reg_124 );

    SC_METHOD(thread_i_2_fu_264_p2);
    sensitive << ( i5_reg_135 );

    SC_METHOD(thread_tmp_10_fu_153_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_tmp_10_fu_153_p2);
    sensitive << ( tmp_10_fu_153_p0 );

    SC_METHOD(thread_tmp_11_fu_165_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_tmp_11_fu_165_p2);
    sensitive << ( tmp_11_fu_165_p0 );

    SC_METHOD(thread_tmp_12_fu_171_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_tmp_12_fu_171_p2);
    sensitive << ( tmp_12_fu_171_p0 );

    SC_METHOD(thread_tmp_13_fu_183_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_tmp_13_fu_183_p2);
    sensitive << ( tmp_13_fu_183_p0 );

    SC_METHOD(thread_tmp_1_fu_201_p1);
    sensitive << ( tmp_reg_301 );

    SC_METHOD(thread_tmp_2_fu_177_p2);
    sensitive << ( tmp_11_fu_165_p2 );
    sensitive << ( tmp_12_fu_171_p2 );

    SC_METHOD(thread_tmp_3_fu_205_p1);
    sensitive << ( tmp_2_reg_306 );

    SC_METHOD(thread_tmp_4_fu_189_p2);
    sensitive << ( tmp_10_fu_153_p2 );
    sensitive << ( tmp_13_fu_183_p2 );

    SC_METHOD(thread_tmp_5_fu_209_p1);
    sensitive << ( tmp_4_reg_311 );

    SC_METHOD(thread_tmp_7_fu_147_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( blockSize );

    SC_METHOD(thread_tmp_7_fu_147_p2);
    sensitive << ( tmp_7_fu_147_p0 );

    SC_METHOD(thread_tmp_8_fu_234_p1);
    sensitive << ( i_reg_124 );

    SC_METHOD(thread_tmp_9_fu_270_p1);
    sensitive << ( i5_reg_135 );

    SC_METHOD(thread_tmp_fu_159_p2);
    sensitive << ( tmp_7_fu_147_p2 );
    sensitive << ( tmp_10_fu_153_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_76 );
    sensitive << ( exitcond1_fu_223_p2 );
    sensitive << ( exitcond_fu_259_p2 );
    sensitive << ( ap_sig_bdd_114 );
    sensitive << ( ap_sig_bdd_126 );
    sensitive << ( ap_sig_bdd_144 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bmm_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, b1_req_din, "(port)b1_req_din");
    sc_trace(mVcdFile, b1_req_full_n, "(port)b1_req_full_n");
    sc_trace(mVcdFile, b1_req_write, "(port)b1_req_write");
    sc_trace(mVcdFile, b1_rsp_empty_n, "(port)b1_rsp_empty_n");
    sc_trace(mVcdFile, b1_rsp_read, "(port)b1_rsp_read");
    sc_trace(mVcdFile, b1_address, "(port)b1_address");
    sc_trace(mVcdFile, b1_datain, "(port)b1_datain");
    sc_trace(mVcdFile, b1_dataout, "(port)b1_dataout");
    sc_trace(mVcdFile, b1_size, "(port)b1_size");
    sc_trace(mVcdFile, b2_req_din, "(port)b2_req_din");
    sc_trace(mVcdFile, b2_req_full_n, "(port)b2_req_full_n");
    sc_trace(mVcdFile, b2_req_write, "(port)b2_req_write");
    sc_trace(mVcdFile, b2_rsp_empty_n, "(port)b2_rsp_empty_n");
    sc_trace(mVcdFile, b2_rsp_read, "(port)b2_rsp_read");
    sc_trace(mVcdFile, b2_address, "(port)b2_address");
    sc_trace(mVcdFile, b2_datain, "(port)b2_datain");
    sc_trace(mVcdFile, b2_dataout, "(port)b2_dataout");
    sc_trace(mVcdFile, b2_size, "(port)b2_size");
    sc_trace(mVcdFile, b3_req_din, "(port)b3_req_din");
    sc_trace(mVcdFile, b3_req_full_n, "(port)b3_req_full_n");
    sc_trace(mVcdFile, b3_req_write, "(port)b3_req_write");
    sc_trace(mVcdFile, b3_rsp_empty_n, "(port)b3_rsp_empty_n");
    sc_trace(mVcdFile, b3_rsp_read, "(port)b3_rsp_read");
    sc_trace(mVcdFile, b3_address, "(port)b3_address");
    sc_trace(mVcdFile, b3_datain, "(port)b3_datain");
    sc_trace(mVcdFile, b3_dataout, "(port)b3_dataout");
    sc_trace(mVcdFile, b3_size, "(port)b3_size");
    sc_trace(mVcdFile, blockSize, "(port)blockSize");
    sc_trace(mVcdFile, blockSize_ap_vld, "(port)blockSize_ap_vld");
    sc_trace(mVcdFile, blockSize_ap_ack, "(port)blockSize_ap_ack");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_76, "ap_sig_bdd_76");
    sc_trace(mVcdFile, tmp_fu_159_p2, "tmp_fu_159_p2");
    sc_trace(mVcdFile, tmp_reg_301, "tmp_reg_301");
    sc_trace(mVcdFile, tmp_2_fu_177_p2, "tmp_2_fu_177_p2");
    sc_trace(mVcdFile, tmp_2_reg_306, "tmp_2_reg_306");
    sc_trace(mVcdFile, tmp_4_fu_189_p2, "tmp_4_fu_189_p2");
    sc_trace(mVcdFile, tmp_4_reg_311, "tmp_4_reg_311");
    sc_trace(mVcdFile, tmp_s_reg_316, "tmp_s_reg_316");
    sc_trace(mVcdFile, i_1_fu_228_p2, "i_1_fu_228_p2");
    sc_trace(mVcdFile, i_1_reg_325, "i_1_reg_325");
    sc_trace(mVcdFile, exitcond1_fu_223_p2, "exitcond1_fu_223_p2");
    sc_trace(mVcdFile, i_2_fu_264_p2, "i_2_fu_264_p2");
    sc_trace(mVcdFile, exitcond_fu_259_p2, "exitcond_fu_259_p2");
    sc_trace(mVcdFile, ap_sig_bdd_114, "ap_sig_bdd_114");
    sc_trace(mVcdFile, i_reg_124, "i_reg_124");
    sc_trace(mVcdFile, ap_sig_bdd_126, "ap_sig_bdd_126");
    sc_trace(mVcdFile, i5_reg_135, "i5_reg_135");
    sc_trace(mVcdFile, tmp_8_fu_234_p1, "tmp_8_fu_234_p1");
    sc_trace(mVcdFile, tmp_9_fu_270_p1, "tmp_9_fu_270_p1");
    sc_trace(mVcdFile, ap_sig_bdd_144, "ap_sig_bdd_144");
    sc_trace(mVcdFile, tmp_1_fu_201_p1, "tmp_1_fu_201_p1");
    sc_trace(mVcdFile, tmp_3_fu_205_p1, "tmp_3_fu_205_p1");
    sc_trace(mVcdFile, tmp_5_fu_209_p1, "tmp_5_fu_209_p1");
    sc_trace(mVcdFile, tmp_7_fu_147_p0, "tmp_7_fu_147_p0");
    sc_trace(mVcdFile, tmp_10_fu_153_p0, "tmp_10_fu_153_p0");
    sc_trace(mVcdFile, tmp_7_fu_147_p2, "tmp_7_fu_147_p2");
    sc_trace(mVcdFile, tmp_10_fu_153_p2, "tmp_10_fu_153_p2");
    sc_trace(mVcdFile, tmp_11_fu_165_p0, "tmp_11_fu_165_p0");
    sc_trace(mVcdFile, tmp_12_fu_171_p0, "tmp_12_fu_171_p0");
    sc_trace(mVcdFile, tmp_11_fu_165_p2, "tmp_11_fu_165_p2");
    sc_trace(mVcdFile, tmp_12_fu_171_p2, "tmp_12_fu_171_p2");
    sc_trace(mVcdFile, tmp_13_fu_183_p0, "tmp_13_fu_183_p0");
    sc_trace(mVcdFile, tmp_13_fu_183_p2, "tmp_13_fu_183_p2");
    sc_trace(mVcdFile, grp_fu_195_p0, "grp_fu_195_p0");
    sc_trace(mVcdFile, grp_fu_195_p1, "grp_fu_195_p1");
    sc_trace(mVcdFile, grp_fu_195_p2, "grp_fu_195_p2");
    sc_trace(mVcdFile, grp_fu_195_ce, "grp_fu_195_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
    mHdltvinHandle.open("bmm_top.hdltvin.dat");
    mHdltvoutHandle.open("bmm_top.hdltvout.dat");
}

bmm_top::~bmm_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete bmm_top_mul_32s_32s_32_6_U1;
}

void bmm_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        i5_reg_135 = ap_const_lv29_0;
    } else if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
                !ap_sig_bdd_114.read())) {
        i5_reg_135 = i_2_fu_264_p2.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
         !ap_sig_bdd_126.read())) {
        i_reg_124 = i_1_reg_325.read();
    } else if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        i_reg_124 = ap_const_lv29_0;
    }
    if (esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read())) {
        i_1_reg_325 = i_1_fu_228_p2.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !ap_sig_bdd_76.read())) {
        tmp_2_reg_306 = tmp_2_fu_177_p2.read();
        tmp_4_reg_311 = tmp_4_fu_189_p2.read();
        tmp_reg_301 = tmp_fu_159_p2.read();
    }
    if (esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        tmp_s_reg_316 = grp_fu_195_p2.read().range(31, 3);
    }
}

void bmm_top::thread_ap_done() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         !ap_sig_bdd_114.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void bmm_top::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void bmm_top::thread_ap_ready() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         !ap_sig_bdd_114.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void bmm_top::thread_ap_sig_bdd_114() {
    ap_sig_bdd_114 = ((esl_seteq<1,1,1>(b1_req_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
  esl_seteq<1,1,1>(b2_req_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
  esl_seteq<1,1,1>(b3_req_full_n.read(), ap_const_logic_0)));
}

void bmm_top::thread_ap_sig_bdd_126() {
    ap_sig_bdd_126 = (esl_seteq<1,1,1>(b1_rsp_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(b2_rsp_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(b3_rsp_empty_n.read(), ap_const_logic_0));
}

void bmm_top::thread_ap_sig_bdd_144() {
    ap_sig_bdd_144 = (esl_seteq<1,1,1>(b1_req_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(b2_req_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(b3_req_full_n.read(), ap_const_logic_0));
}

void bmm_top::thread_ap_sig_bdd_76() {
    ap_sig_bdd_76 = (esl_seteq<1,1,1>(blockSize_ap_vld.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void bmm_top::thread_b1_address() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b1_address =  (sc_lv<32>) (tmp_9_fu_270_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b1_address =  (sc_lv<32>) (tmp_8_fu_234_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b1_address = ap_const_lv32_0;
    } else {
        b1_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void bmm_top::thread_b1_dataout() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b1_dataout = ap_const_lv256_lc_1;
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b1_dataout = tmp_1_fu_201_p1.read();
    } else {
        b1_dataout =  (sc_lv<256>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void bmm_top::thread_b1_req_din() {
    if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b1_req_din = ap_const_logic_0;
    } else if (((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
                 !ap_sig_bdd_114.read()) || 
                (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                 !ap_sig_bdd_144.read()))) {
        b1_req_din = ap_const_logic_1;
    } else {
        b1_req_din = ap_const_logic_0;
    }
}

void bmm_top::thread_b1_req_write() {
    if (((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
          !ap_sig_bdd_114.read()) || 
         (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !ap_sig_bdd_144.read()))) {
        b1_req_write = ap_const_logic_1;
    } else {
        b1_req_write = ap_const_logic_0;
    }
}

void bmm_top::thread_b1_rsp_read() {
    if ((esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
         !ap_sig_bdd_126.read())) {
        b1_rsp_read = ap_const_logic_1;
    } else {
        b1_rsp_read = ap_const_logic_0;
    }
}

void bmm_top::thread_b1_size() {
    b1_size = ap_const_lv32_1;
}

void bmm_top::thread_b2_address() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b2_address =  (sc_lv<32>) (tmp_9_fu_270_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b2_address =  (sc_lv<32>) (tmp_8_fu_234_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b2_address = ap_const_lv32_0;
    } else {
        b2_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void bmm_top::thread_b2_dataout() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b2_dataout = ap_const_lv256_lc_1;
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b2_dataout = tmp_3_fu_205_p1.read();
    } else {
        b2_dataout =  (sc_lv<256>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void bmm_top::thread_b2_req_din() {
    if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b2_req_din = ap_const_logic_0;
    } else if (((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
                 !ap_sig_bdd_114.read()) || 
                (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                 !ap_sig_bdd_144.read()))) {
        b2_req_din = ap_const_logic_1;
    } else {
        b2_req_din = ap_const_logic_0;
    }
}

void bmm_top::thread_b2_req_write() {
    if (((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
          !ap_sig_bdd_114.read()) || 
         (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !ap_sig_bdd_144.read()))) {
        b2_req_write = ap_const_logic_1;
    } else {
        b2_req_write = ap_const_logic_0;
    }
}

void bmm_top::thread_b2_rsp_read() {
    if ((esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
         !ap_sig_bdd_126.read())) {
        b2_rsp_read = ap_const_logic_1;
    } else {
        b2_rsp_read = ap_const_logic_0;
    }
}

void bmm_top::thread_b2_size() {
    b2_size = ap_const_lv32_1;
}

void bmm_top::thread_b3_address() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b3_address =  (sc_lv<32>) (tmp_9_fu_270_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b3_address =  (sc_lv<32>) (tmp_8_fu_234_p1.read());
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b3_address = ap_const_lv32_0;
    } else {
        b3_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void bmm_top::thread_b3_dataout() {
    if ((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
         !ap_sig_bdd_114.read())) {
        b3_dataout = ap_const_lv256_lc_1;
    } else if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                !ap_sig_bdd_144.read())) {
        b3_dataout = tmp_5_fu_209_p1.read();
    } else {
        b3_dataout =  (sc_lv<256>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void bmm_top::thread_b3_req_din() {
    if ((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0))) {
        b3_req_din = ap_const_logic_0;
    } else if (((esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
                 !ap_sig_bdd_114.read()) || 
                (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
                 !ap_sig_bdd_144.read()))) {
        b3_req_din = ap_const_logic_1;
    } else {
        b3_req_din = ap_const_logic_0;
    }
}

void bmm_top::thread_b3_req_write() {
    if (((esl_seteq<1,4,4>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && 
          !ap_sig_bdd_114.read()) || 
         (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !ap_sig_bdd_144.read()))) {
        b3_req_write = ap_const_logic_1;
    } else {
        b3_req_write = ap_const_logic_0;
    }
}

void bmm_top::thread_b3_rsp_read() {
    if ((esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
         !ap_sig_bdd_126.read())) {
        b3_rsp_read = ap_const_logic_1;
    } else {
        b3_rsp_read = ap_const_logic_0;
    }
}

void bmm_top::thread_b3_size() {
    b3_size = ap_const_lv32_1;
}

void bmm_top::thread_blockSize_ap_ack() {
    if ((esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !ap_sig_bdd_76.read())) {
        blockSize_ap_ack = ap_const_logic_1;
    } else {
        blockSize_ap_ack = ap_const_logic_0;
    }
}

void bmm_top::thread_exitcond1_fu_223_p2() {
    exitcond1_fu_223_p2 = (!i_reg_124.read().is_01() || !tmp_s_reg_316.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_124.read() == tmp_s_reg_316.read());
}

void bmm_top::thread_exitcond_fu_259_p2() {
    exitcond_fu_259_p2 = (!i5_reg_135.read().is_01() || !tmp_s_reg_316.read().is_01())? sc_lv<1>(): sc_lv<1>(i5_reg_135.read() == tmp_s_reg_316.read());
}

void bmm_top::thread_grp_fu_195_ce() {
    if (((esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
          !ap_sig_bdd_76.read()) || 
         esl_seteq<1,4,4>(ap_ST_st6_fsm_5, ap_CS_fsm.read()) || 
         (esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !ap_sig_bdd_144.read()) || 
         esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) || 
         esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) || 
         esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        grp_fu_195_ce = ap_const_logic_1;
    } else {
        grp_fu_195_ce = ap_const_logic_0;
    }
}

void bmm_top::thread_grp_fu_195_p0() {
    grp_fu_195_p0 = blockSize.read();
}

void bmm_top::thread_grp_fu_195_p1() {
    grp_fu_195_p1 = blockSize.read();
}

void bmm_top::thread_i_1_fu_228_p2() {
    i_1_fu_228_p2 = (!i_reg_124.read().is_01() || !ap_const_lv29_1.is_01())? sc_lv<29>(): (sc_bigint<29>(i_reg_124.read()) + sc_biguint<29>(ap_const_lv29_1));
}

void bmm_top::thread_i_2_fu_264_p2() {
    i_2_fu_264_p2 = (!i5_reg_135.read().is_01() || !ap_const_lv29_1.is_01())? sc_lv<29>(): (sc_bigint<29>(i5_reg_135.read()) + sc_biguint<29>(ap_const_lv29_1));
}

void bmm_top::thread_tmp_10_fu_153_p0() {
    tmp_10_fu_153_p0 = blockSize.read();
}

void bmm_top::thread_tmp_10_fu_153_p2() {
    tmp_10_fu_153_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): tmp_10_fu_153_p0.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void bmm_top::thread_tmp_11_fu_165_p0() {
    tmp_11_fu_165_p0 = blockSize.read();
}

void bmm_top::thread_tmp_11_fu_165_p2() {
    tmp_11_fu_165_p2 = (!ap_const_lv32_4.is_01())? sc_lv<32>(): tmp_11_fu_165_p0.read() << (unsigned short)ap_const_lv32_4.to_uint();
}

void bmm_top::thread_tmp_12_fu_171_p0() {
    tmp_12_fu_171_p0 = blockSize.read();
}

void bmm_top::thread_tmp_12_fu_171_p2() {
    tmp_12_fu_171_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_12_fu_171_p0.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void bmm_top::thread_tmp_13_fu_183_p0() {
    tmp_13_fu_183_p0 = blockSize.read();
}

void bmm_top::thread_tmp_13_fu_183_p2() {
    tmp_13_fu_183_p2 = (!ap_const_lv32_5.is_01())? sc_lv<32>(): tmp_13_fu_183_p0.read() << (unsigned short)ap_const_lv32_5.to_uint();
}

void bmm_top::thread_tmp_1_fu_201_p1() {
    tmp_1_fu_201_p1 = esl_sext<256,32>(tmp_reg_301.read());
}

void bmm_top::thread_tmp_2_fu_177_p2() {
    tmp_2_fu_177_p2 = (!tmp_11_fu_165_p2.read().is_01() || !tmp_12_fu_171_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_11_fu_165_p2.read()) + sc_biguint<32>(tmp_12_fu_171_p2.read()));
}

void bmm_top::thread_tmp_3_fu_205_p1() {
    tmp_3_fu_205_p1 = esl_sext<256,32>(tmp_2_reg_306.read());
}

void bmm_top::thread_tmp_4_fu_189_p2() {
    tmp_4_fu_189_p2 = (!tmp_13_fu_183_p2.read().is_01() || !tmp_10_fu_153_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_13_fu_183_p2.read()) - sc_biguint<32>(tmp_10_fu_153_p2.read()));
}

void bmm_top::thread_tmp_5_fu_209_p1() {
    tmp_5_fu_209_p1 = esl_sext<256,32>(tmp_4_reg_311.read());
}

void bmm_top::thread_tmp_7_fu_147_p0() {
    tmp_7_fu_147_p0 = blockSize.read();
}

void bmm_top::thread_tmp_7_fu_147_p2() {
    tmp_7_fu_147_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): tmp_7_fu_147_p0.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void bmm_top::thread_tmp_8_fu_234_p1() {
    tmp_8_fu_234_p1 = esl_zext<64,29>(i_reg_124.read());
}

void bmm_top::thread_tmp_9_fu_270_p1() {
    tmp_9_fu_270_p1 = esl_zext<64,29>(i5_reg_135.read());
}

void bmm_top::thread_tmp_fu_159_p2() {
    tmp_fu_159_p2 = (!tmp_7_fu_147_p2.read().is_01() || !tmp_10_fu_153_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_7_fu_147_p2.read()) + sc_biguint<32>(tmp_10_fu_153_p2.read()));
}

void bmm_top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!ap_sig_bdd_76.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!ap_sig_bdd_144.read()) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_223_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            if (!ap_sig_bdd_126.read()) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else {
                ap_NS_fsm = ap_ST_st12_fsm_11;
            }
            break;
        case 12 : 
            if ((!ap_sig_bdd_114.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_259_p2.read()) && !ap_sig_bdd_114.read())) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}
void bmm_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_req_din\" :  \"" << b1_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b1_req_full_n\" :  \"" << b1_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_req_write\" :  \"" << b1_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b1_rsp_empty_n\" :  \"" << b1_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_rsp_read\" :  \"" << b1_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_address\" :  \"" << b1_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b1_datain\" :  \"" << b1_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_dataout\" :  \"" << b1_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b1_size\" :  \"" << b1_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_req_din\" :  \"" << b2_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b2_req_full_n\" :  \"" << b2_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_req_write\" :  \"" << b2_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b2_rsp_empty_n\" :  \"" << b2_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_rsp_read\" :  \"" << b2_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_address\" :  \"" << b2_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b2_datain\" :  \"" << b2_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_dataout\" :  \"" << b2_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b2_size\" :  \"" << b2_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_req_din\" :  \"" << b3_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b3_req_full_n\" :  \"" << b3_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_req_write\" :  \"" << b3_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b3_rsp_empty_n\" :  \"" << b3_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_rsp_read\" :  \"" << b3_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_address\" :  \"" << b3_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b3_datain\" :  \"" << b3_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_dataout\" :  \"" << b3_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b3_size\" :  \"" << b3_size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"blockSize\" :  \"" << blockSize.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"blockSize_ap_vld\" :  \"" << blockSize_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"blockSize_ap_ack\" :  \"" << blockSize_ap_ack.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

