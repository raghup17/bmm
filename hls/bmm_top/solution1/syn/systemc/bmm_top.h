// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _bmm_top_HH_
#define _bmm_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct bmm_top : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > b1_req_din;
    sc_in< sc_logic > b1_req_full_n;
    sc_out< sc_logic > b1_req_write;
    sc_in< sc_logic > b1_rsp_empty_n;
    sc_out< sc_logic > b1_rsp_read;
    sc_out< sc_lv<32> > b1_address;
    sc_in< sc_lv<256> > b1_datain;
    sc_out< sc_lv<256> > b1_dataout;
    sc_out< sc_lv<32> > b1_size;
    sc_out< sc_logic > b2_req_din;
    sc_in< sc_logic > b2_req_full_n;
    sc_out< sc_logic > b2_req_write;
    sc_in< sc_logic > b2_rsp_empty_n;
    sc_out< sc_logic > b2_rsp_read;
    sc_out< sc_lv<32> > b2_address;
    sc_in< sc_lv<256> > b2_datain;
    sc_out< sc_lv<256> > b2_dataout;
    sc_out< sc_lv<32> > b2_size;
    sc_out< sc_logic > b3_req_din;
    sc_in< sc_logic > b3_req_full_n;
    sc_out< sc_logic > b3_req_write;
    sc_in< sc_logic > b3_rsp_empty_n;
    sc_out< sc_logic > b3_rsp_read;
    sc_out< sc_lv<32> > b3_address;
    sc_in< sc_lv<256> > b3_datain;
    sc_out< sc_lv<256> > b3_dataout;
    sc_out< sc_lv<32> > b3_size;
    sc_in< sc_lv<32> > blockSize;
    sc_in< sc_logic > blockSize_ap_vld;
    sc_out< sc_logic > blockSize_ap_ack;


    // Module declarations
    bmm_top(sc_module_name name);
    SC_HAS_PROCESS(bmm_top);

    ~bmm_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_lv<32> > blockSize_read_reg_364;
    sc_signal< bool > ap_sig_bdd_82;
    sc_signal< sc_lv<32> > dim_cast_fu_251_p1;
    sc_signal< sc_lv<32> > dim_cast_reg_370;
    sc_signal< sc_lv<32> > t1_1_fu_265_p2;
    sc_signal< sc_lv<32> > t1_1_reg_384;
    sc_signal< sc_lv<32> > tmp_5_fu_271_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_389;
    sc_signal< sc_lv<1> > tmp_4_fu_260_p2;
    sc_signal< sc_lv<32> > j_1_fu_299_p2;
    sc_signal< sc_lv<32> > j_1_reg_409;
    sc_signal< sc_lv<32> > t1_2_fu_310_p2;
    sc_signal< sc_lv<32> > t1_2_reg_417;
    sc_signal< sc_lv<32> > tmp_8_fu_316_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_422;
    sc_signal< sc_lv<1> > tmp_2_fu_305_p2;
    sc_signal< sc_lv<32> > t1_3_fu_337_p2;
    sc_signal< sc_lv<32> > t1_3_reg_436;
    sc_signal< sc_lv<32> > tmp_10_fu_343_p2;
    sc_signal< sc_lv<32> > tmp_10_reg_441;
    sc_signal< sc_lv<1> > tmp_7_fu_332_p2;
    sc_signal< sc_lv<32> > i_1_fu_349_p2;
    sc_signal< sc_lv<32> > i_reg_119;
    sc_signal< sc_lv<32> > t1_reg_131;
    sc_signal< bool > ap_sig_bdd_138;
    sc_signal< sc_lv<1> > tmp_3_fu_255_p2;
    sc_signal< sc_lv<32> > j_reg_142;
    sc_signal< sc_lv<32> > t_reg_154;
    sc_signal< sc_lv<1> > tmp_s_fu_294_p2;
    sc_signal< sc_lv<32> > t3_reg_165;
    sc_signal< sc_lv<64> > tmp_6_fu_277_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_322_p1;
    sc_signal< sc_lv<64> > tmp_11_fu_354_p1;
    sc_signal< sc_lv<32> > p_neg_fu_185_p2;
    sc_signal< sc_lv<24> > tmp_1_fu_191_p4;
    sc_signal< sc_lv<25> > p_lshr_cast_fu_201_p1;
    sc_signal< sc_lv<24> > tmp_12_fu_211_p4;
    sc_signal< sc_lv<1> > tmp_14_fu_177_p3;
    sc_signal< sc_lv<25> > p_neg_t_fu_205_p2;
    sc_signal< sc_lv<25> > p_lshr_f_cast_fu_221_p1;
    sc_signal< sc_lv<25> > tmp_fu_225_p3;
    sc_signal< sc_lv<23> > tmp_13_fu_233_p4;
    sc_signal< sc_lv<26> > dim_fu_243_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<5> ap_ST_st6_fsm_5;
    static const sc_lv<5> ap_ST_st7_fsm_6;
    static const sc_lv<5> ap_ST_st8_fsm_7;
    static const sc_lv<5> ap_ST_st9_fsm_8;
    static const sc_lv<5> ap_ST_st10_fsm_9;
    static const sc_lv<5> ap_ST_st11_fsm_10;
    static const sc_lv<5> ap_ST_st12_fsm_11;
    static const sc_lv<5> ap_ST_st13_fsm_12;
    static const sc_lv<5> ap_ST_st14_fsm_13;
    static const sc_lv<5> ap_ST_st15_fsm_14;
    static const sc_lv<5> ap_ST_st16_fsm_15;
    static const sc_lv<5> ap_ST_st17_fsm_16;
    static const sc_lv<5> ap_ST_st18_fsm_17;
    static const sc_lv<5> ap_ST_st19_fsm_18;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<256> ap_const_lv256_lc_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<3> ap_const_lv3_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_138();
    void thread_ap_sig_bdd_82();
    void thread_b1_address();
    void thread_b1_dataout();
    void thread_b1_req_din();
    void thread_b1_req_write();
    void thread_b1_rsp_read();
    void thread_b1_size();
    void thread_b2_address();
    void thread_b2_dataout();
    void thread_b2_req_din();
    void thread_b2_req_write();
    void thread_b2_rsp_read();
    void thread_b2_size();
    void thread_b3_address();
    void thread_b3_dataout();
    void thread_b3_req_din();
    void thread_b3_req_write();
    void thread_b3_rsp_read();
    void thread_b3_size();
    void thread_blockSize_ap_ack();
    void thread_dim_cast_fu_251_p1();
    void thread_dim_fu_243_p3();
    void thread_i_1_fu_349_p2();
    void thread_j_1_fu_299_p2();
    void thread_p_lshr_cast_fu_201_p1();
    void thread_p_lshr_f_cast_fu_221_p1();
    void thread_p_neg_fu_185_p2();
    void thread_p_neg_t_fu_205_p2();
    void thread_t1_1_fu_265_p2();
    void thread_t1_2_fu_310_p2();
    void thread_t1_3_fu_337_p2();
    void thread_tmp_10_fu_343_p2();
    void thread_tmp_11_fu_354_p1();
    void thread_tmp_12_fu_211_p4();
    void thread_tmp_13_fu_233_p4();
    void thread_tmp_14_fu_177_p3();
    void thread_tmp_1_fu_191_p4();
    void thread_tmp_2_fu_305_p2();
    void thread_tmp_3_fu_255_p2();
    void thread_tmp_4_fu_260_p2();
    void thread_tmp_5_fu_271_p2();
    void thread_tmp_6_fu_277_p1();
    void thread_tmp_7_fu_332_p2();
    void thread_tmp_8_fu_316_p2();
    void thread_tmp_9_fu_322_p1();
    void thread_tmp_fu_225_p3();
    void thread_tmp_s_fu_294_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
