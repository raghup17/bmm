-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fe_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start : OUT STD_LOGIC_VECTOR (31 downto 0);
    idle : IN STD_LOGIC_VECTOR (31 downto 0);
    done : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fe_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fe_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.815000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal phitmp_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_phi_fu_58_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- start_preg assign process. --
    start_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_preg <= ap_const_lv32_0;
            else
                if (((grp_fu_66_p2 = ap_const_lv1_0) and (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
                    start_preg <= ap_const_lv32_FFFFFFFF;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_2_phi_fu_58_p4 = ap_const_lv1_0)))) then 
                    start_preg <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_2_phi_fu_58_p4 , grp_fu_66_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((grp_fu_66_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((tmp_2_phi_fu_58_p4 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_2_phi_fu_58_p4)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_2_phi_fu_58_p4 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_2_phi_fu_58_p4)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_2_phi_fu_58_p4 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_66_p2 <= "1" when (idle = ap_const_lv32_0) else "0";
    phitmp_fu_72_p2 <= "1" when (done = ap_const_lv32_0) else "0";

    -- start assign process. --
    start_assign_proc : process(ap_start, ap_CS_fsm, tmp_2_phi_fu_58_p4, grp_fu_66_p2, start_preg)
    begin
        if (((grp_fu_66_p2 = ap_const_lv1_0) and (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            start <= ap_const_lv32_FFFFFFFF;
        elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_2_phi_fu_58_p4 = ap_const_lv1_0)))) then 
            start <= ap_const_lv32_0;
        else 
            start <= start_preg;
        end if; 
    end process;


    -- tmp_2_phi_fu_58_p4 assign process. --
    tmp_2_phi_fu_58_p4_assign_proc : process(ap_CS_fsm, phitmp_fu_72_p2, grp_fu_66_p2)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
            if ((grp_fu_66_p2 = ap_const_lv1_0)) then 
                tmp_2_phi_fu_58_p4 <= ap_const_lv1_0;
            elsif (not((grp_fu_66_p2 = ap_const_lv1_0))) then 
                tmp_2_phi_fu_58_p4 <= phitmp_fu_72_p2;
            else 
                tmp_2_phi_fu_58_p4 <= "X";
            end if;
        else 
            tmp_2_phi_fu_58_p4 <= "X";
        end if; 
    end process;

end behav;
