// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "fe_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fe_top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fe_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> fe_top::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> fe_top::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> fe_top::ap_ST_st3_fsm_2 = "10";
const sc_lv<2> fe_top::ap_ST_st4_fsm_3 = "11";
const sc_lv<1> fe_top::ap_const_lv1_0 = "0";
const sc_lv<32> fe_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fe_top::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

fe_top::fe_top(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_phi_fu_58_p4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_phi_fu_58_p4 );

    SC_METHOD(thread_grp_fu_66_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( idle );

    SC_METHOD(thread_phitmp_fu_72_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( done );
    sensitive << ( grp_fu_66_p2 );

    SC_METHOD(thread_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_phi_fu_58_p4 );
    sensitive << ( grp_fu_66_p2 );
    sensitive << ( start_preg );

    SC_METHOD(thread_tmp_2_phi_fu_58_p4);
    sensitive << ( ap_CS_fsm );
    sensitive << ( phitmp_fu_72_p2 );
    sensitive << ( grp_fu_66_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_2_phi_fu_58_p4 );
    sensitive << ( grp_fu_66_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00";
    start_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fe_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, idle, "(port)idle");
    sc_trace(mVcdFile, done, "(port)done");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, phitmp_fu_72_p2, "phitmp_fu_72_p2");
    sc_trace(mVcdFile, tmp_2_phi_fu_58_p4, "tmp_2_phi_fu_58_p4");
    sc_trace(mVcdFile, grp_fu_66_p2, "grp_fu_66_p2");
    sc_trace(mVcdFile, start_preg, "start_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
    mHdltvinHandle.open("fe_top.hdltvin.dat");
    mHdltvoutHandle.open("fe_top.hdltvout.dat");
}

fe_top::~fe_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fe_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(grp_fu_66_p2.read(), ap_const_lv1_0) && 
             esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()))) {
            start_preg = ap_const_lv32_FFFFFFFF;
        } else if (((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                     !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                    esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) || 
                    (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                     esl_seteq<1,1,1>(tmp_2_phi_fu_58_p4.read(), ap_const_lv1_0)))) {
            start_preg = ap_const_lv32_0;
        }
    }
}

void fe_top::thread_ap_done() {
    if ((esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_2_phi_fu_58_p4.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fe_top::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fe_top::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(tmp_2_phi_fu_58_p4.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fe_top::thread_grp_fu_66_p2() {
    grp_fu_66_p2 = (!idle.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(idle.read() == ap_const_lv32_0);
}

void fe_top::thread_phitmp_fu_72_p2() {
    phitmp_fu_72_p2 = (!done.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(done.read() == ap_const_lv32_0);
}

void fe_top::thread_start() {
    if ((esl_seteq<1,1,1>(grp_fu_66_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()))) {
        start = ap_const_lv32_FFFFFFFF;
    } else if (((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
                esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) || 
                (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read()) && 
                 esl_seteq<1,1,1>(tmp_2_phi_fu_58_p4.read(), ap_const_lv1_0)))) {
        start = ap_const_lv32_0;
    } else {
        start = start_preg.read();
    }
}

void fe_top::thread_tmp_2_phi_fu_58_p4() {
    if (esl_seteq<1,2,2>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        if (esl_seteq<1,1,1>(grp_fu_66_p2.read(), ap_const_lv1_0)) {
            tmp_2_phi_fu_58_p4 = ap_const_lv1_0;
        } else if (!esl_seteq<1,1,1>(grp_fu_66_p2.read(), ap_const_lv1_0)) {
            tmp_2_phi_fu_58_p4 = phitmp_fu_72_p2.read();
        } else {
            tmp_2_phi_fu_58_p4 = "X";
        }
    } else {
        tmp_2_phi_fu_58_p4 = "X";
    }
}

void fe_top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (esl_seteq<1,1,1>(grp_fu_66_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            if (esl_seteq<1,1,1>(tmp_2_phi_fu_58_p4.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}
void fe_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"start\" :  \"" << start.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"idle\" :  \"" << idle.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"done\" :  \"" << done.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

