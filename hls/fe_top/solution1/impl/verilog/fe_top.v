// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fe_top,hls_ip_2013_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.815000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module fe_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        start,
        idle,
        done
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] start;
input  [31:0] idle;
input  [31:0] done;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] start;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [0:0] phitmp_fu_72_p2;
reg   [0:0] tmp_2_phi_fu_58_p4;
wire   [0:0] grp_fu_66_p2;
reg   [31:0] start_preg = 32'b00000000000000000000000000000000;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// start_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_start_preg
    if (ap_rst == 1'b1) begin
        start_preg <= ap_const_lv32_0;
    end else begin
        if (((grp_fu_66_p2 == ap_const_lv1_0) & (ap_ST_st2_fsm_1 == ap_CS_fsm))) begin
            start_preg <= ap_const_lv32_FFFFFFFF;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & (tmp_2_phi_fu_58_p4 == ap_const_lv1_0)))) begin
            start_preg <= ap_const_lv32_0;
        end
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_2_phi_fu_58_p4)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (tmp_2_phi_fu_58_p4 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_2_phi_fu_58_p4)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (tmp_2_phi_fu_58_p4 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// start assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_2_phi_fu_58_p4 or grp_fu_66_p2 or start_preg)
begin
    if (((grp_fu_66_p2 == ap_const_lv1_0) & (ap_ST_st2_fsm_1 == ap_CS_fsm))) begin
        start = ap_const_lv32_FFFFFFFF;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & (tmp_2_phi_fu_58_p4 == ap_const_lv1_0)))) begin
        start = ap_const_lv32_0;
    end else begin
        start = start_preg;
    end
end

/// tmp_2_phi_fu_58_p4 assign process. ///
always @ (ap_CS_fsm or phitmp_fu_72_p2 or grp_fu_66_p2)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        if ((grp_fu_66_p2 == ap_const_lv1_0)) begin
            tmp_2_phi_fu_58_p4 = ap_const_lv1_0;
        end else if (~(grp_fu_66_p2 == ap_const_lv1_0)) begin
            tmp_2_phi_fu_58_p4 = phitmp_fu_72_p2;
        end else begin
            tmp_2_phi_fu_58_p4 = 'bx;
        end
    end else begin
        tmp_2_phi_fu_58_p4 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_2_phi_fu_58_p4 or grp_fu_66_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((grp_fu_66_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if ((tmp_2_phi_fu_58_p4 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign grp_fu_66_p2 = (idle == ap_const_lv32_0? 1'b1: 1'b0);
assign phitmp_fu_72_p2 = (done == ap_const_lv32_0? 1'b1: 1'b0);


endmodule //fe_top

